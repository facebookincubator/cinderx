# Copyright (c) Meta Platforms, Inc. and affiliates.
from _typeshed import Incomplete

path_separators: Incomplete
path_sep: Incomplete
path_sep_tuple: Incomplete
MAGIC_NUMBER: Incomplete
SOURCE_SUFFIXES: Incomplete
EXTENSION_SUFFIXES: Incomplete
BYTECODE_SUFFIXES: Incomplete
DEBUG_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES
OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES

def cache_from_source(
    path,
    debug_override: Incomplete | None = ...,
    *,
    optimization: Incomplete | None = ...,
): ...
def source_from_cache(path): ...
def decode_source(source_bytes): ...
def spec_from_file_location(
    name,
    location: Incomplete | None = ...,
    *,
    loader: Incomplete | None = ...,
    submodule_search_locations=...,
): ...

class WindowsRegistryFinder:
    REGISTRY_KEY: str
    REGISTRY_KEY_DEBUG: str
    DEBUG_BUILD: Incomplete
    @classmethod
    def find_spec(
        cls, fullname, path: Incomplete | None = ..., target: Incomplete | None = ...
    ): ...
    @classmethod
    def find_module(cls, fullname, path: Incomplete | None = ...): ...

class _LoaderBasics:
    def is_package(self, fullname): ...
    def create_module(self, spec) -> None: ...
    def exec_module(self, module) -> None: ...
    def load_module(self, fullname): ...

class SourceLoader(_LoaderBasics):
    def path_mtime(self, path) -> None: ...
    def path_stats(self, path): ...
    def set_data(self, path, data) -> None: ...
    def get_source(self, fullname): ...
    def source_to_code(self, data, path, *, _optimize: int = ...): ...
    def get_code(self, fullname): ...

class FileLoader:
    name: Incomplete
    path: Incomplete
    def __init__(self, fullname, path) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def load_module(self, fullname): ...
    def get_filename(self, fullname): ...
    def get_data(self, path): ...
    def get_resource_reader(self, module): ...

class SourceFileLoader(FileLoader, SourceLoader):
    def path_stats(self, path): ...
    def set_data(self, path, data, *, _mode: int = ...) -> None: ...

class SourcelessFileLoader(FileLoader, _LoaderBasics):
    def get_code(self, fullname): ...
    def get_source(self, fullname) -> None: ...

class ExtensionFileLoader(FileLoader, _LoaderBasics):
    name: Incomplete
    path: Incomplete
    def __init__(self, name, path) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def create_module(self, spec): ...
    def exec_module(self, module) -> None: ...
    def is_package(self, fullname): ...
    def get_code(self, fullname) -> None: ...
    def get_source(self, fullname) -> None: ...
    def get_filename(self, fullname): ...

class _NamespacePath:
    def __init__(self, name, path, path_finder) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, path) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, item) -> bool: ...
    def append(self, item) -> None: ...

class _NamespaceLoader:
    def __init__(self, name, path, path_finder) -> None: ...
    @staticmethod
    def module_repr(module): ...
    def is_package(self, fullname): ...
    def get_source(self, fullname): ...
    def get_code(self, fullname): ...
    def create_module(self, spec) -> None: ...
    def exec_module(self, module) -> None: ...
    def load_module(self, fullname): ...
    def get_resource_reader(self, module): ...

class PathFinder:
    @staticmethod
    def invalidate_caches() -> None: ...
    @classmethod
    def find_spec(
        cls, fullname, path: Incomplete | None = ..., target: Incomplete | None = ...
    ): ...
    @classmethod
    def find_module(cls, fullname, path: Incomplete | None = ...): ...
    @staticmethod
    def find_distributions(*args, **kwargs): ...

class FileFinder:
    path: Incomplete
    def __init__(self, path, *loader_details) -> None: ...
    def invalidate_caches(self) -> None: ...
    find_module: Incomplete
    def find_loader(self, fullname): ...
    def find_spec(self, fullname, target: Incomplete | None = ...): ...
    @classmethod
    def path_hook(cls, *loader_details): ...
