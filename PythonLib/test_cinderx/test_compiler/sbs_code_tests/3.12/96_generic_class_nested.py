# pyre-ignore-all-errors
class C:
    class Nested: pass
    def generic_method[T](self, x: T, y: Nested) -> T: pass
# EXPECTED:
[   
    ...,
    PUSH_NULL(0),
    LOAD_BUILD_CLASS(0),
    LOAD_CONST(Code((2,0))),
    MAKE_FUNCTION(0),
    LOAD_CONST('C'),
    CALL(2),
    STORE_NAME('C'),
    RETURN_CONST(None),

    CODE_START('C'),
    ...,
    LOAD_NAME('__name__'),
    STORE_NAME('__module__'),
    LOAD_CONST('C'),
    STORE_NAME('__qualname__'),
    LOAD_LOCALS(0),
    STORE_DEREF('__classdict__'),
    PUSH_NULL(0),
    LOAD_BUILD_CLASS(0),
    LOAD_CONST(Code((3,4))),
    MAKE_FUNCTION(0),
    LOAD_CONST('Nested'),
    CALL(2),
    STORE_NAME('Nested'),
    PUSH_NULL(0),
    LOAD_CLOSURE("__classdict__"),
    BUILD_TUPLE(1),
    LOAD_CONST(Code((4,23))),
    MAKE_FUNCTION(8),
    CALL(0),
    STORE_NAME('generic_method'),
    LOAD_CLOSURE('__classdict__'),
    STORE_NAME('__classdictcell__'),
    RETURN_CONST(None),
    
    CODE_START('Nested'),
    ...,
    LOAD_NAME('__name__'),
    STORE_NAME('__module__'),
    LOAD_CONST('C.Nested'),
    STORE_NAME('__qualname__'),
    RETURN_CONST(None),
    
    CODE_START('<generic parameters of generic_method>'),
    ...,
    LOAD_CONST('T'),
    CALL_INTRINSIC_1(7),
    COPY(1),
    STORE_FAST('T'),
    BUILD_TUPLE(1),
    LOAD_CONST('x'),
    LOAD_FAST('T'),
    LOAD_CONST('y'),
    LOAD_DEREF("__classdict__"),
    LOAD_FROM_DICT_OR_GLOBALS('Nested'),
    LOAD_CONST('return'),
    LOAD_FAST('T'),
    BUILD_TUPLE(6),
    LOAD_CONST(Code((4,4))),
    MAKE_FUNCTION(4),
    SWAP(2),
    CALL_INTRINSIC_2(4),
    RETURN_VALUE(0),
    
    CODE_START('generic_method'),
    ...,
    RETURN_CONST(None),
]
