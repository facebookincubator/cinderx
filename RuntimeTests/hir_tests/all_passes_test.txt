--- Test Suite Name ---
AllPassesTest
--- Passes ---
@AllPasses
--- Test Name ---
ReturnConstant
--- Input ---
def test():
  return 1
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v1:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return v1
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v5
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v6:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v7:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return<ImmortalLongExact[1]> v7
  }
}
--- Test Name ---
IfIsinstanceEmitsLoadFieldAndIsInstance
--- Input ---
def test(x):
  if isinstance(x, str):
    return 1
  return 2
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:Object = LoadArg<0; "x">
    v8:OptObject = LoadGlobalCached<0; "isinstance">
    v9:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: isinstance'
      LiveValues<2> b:v7 b:v8
      FrameState {
        CurInstrOffset 0
        Locals<1> v7
      }
    }
    v11:OptObject = LoadGlobalCached<1; "str">
    v12:ImmortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v11 {
      Descr 'LOAD_GLOBAL: str'
      LiveValues<3> b:v7 b:v9 b:v11
      FrameState {
        CurInstrOffset 2
        Locals<1> v7
        Stack<1> v9
      }
    }
    v17:Type = LoadField<ob_type@8, Type, borrowed> v7
    v18:CBool = PrimitiveCompare<Equal> v17 v12
    CondBranch<3, 4> v18
  }

  bb 3 (preds 0) {
    v19:Bool = PrimitiveBoxBool v18
    Branch<5>
  }

  bb 4 (preds 0) {
    v20:CInt32 = IsInstance v7 v12 {
      LiveValues<2> b:v7 unc:v12
      FrameState {
        CurInstrOffset 6
        Locals<1> v7
      }
    }
    v21:CInt32[1] = LoadConst<CInt32[1]>
    v22:CBool = PrimitiveCompare<Equal> v20 v21
    v23:Bool = PrimitiveBoxBool v22
    Branch<5>
  }

  bb 5 (preds 3, 4) {
    v24:Bool = Phi<3, 4> v19 v23
    v25:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    v26:CBool = PrimitiveCompare<Equal> v24 v25
    CondBranch<1, 2> v26
  }

  bb 1 (preds 5) {
    v15:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return v15
  }

  bb 2 (preds 5) {
    v16:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    Return v16
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v11:Object = LoadArg<0; "x">
    v13:CInt32 = LoadEvalBreaker
    CondBranch<4, 3> v13
  }

  bb 4 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v14:CInt32 = RunPeriodicTasks {
      LiveValues<1> b:v11
      FrameState {
        CurInstrOffset 0
        Locals<1> v11
      }
    }
    Branch<3>
  }

  bb 3 (preds 0, 4) {
    v16:Nullptr = LoadConst<Nullptr>
    v17:OptObject = LoadGlobalCached<0; "isinstance">
    v18:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v17 {
      Descr 'LOAD_GLOBAL: isinstance'
      LiveValues<3> b:v11 unc:v16 b:v17
      FrameState {
        CurInstrOffset 2
        Locals<1> v11
      }
    }
    v19:OptObject = LoadGlobalCached<1; "str">
    v20:ImmortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v19 {
      Descr 'LOAD_GLOBAL: str'
      LiveValues<4> b:v11 unc:v16 b:v18 b:v19
      FrameState {
        CurInstrOffset 12
        Locals<1> v11
        Stack<2> v16 v18
      }
    }
    v28:Type = LoadField<ob_type@8, Type, borrowed> v11
    v29:CBool = PrimitiveCompare<Equal> v28 v20
    CondBranch<5, 6> v29
  }

  bb 5 (preds 3) {
    v30:Bool = PrimitiveBoxBool v29
    Branch<7>
  }

  bb 6 (preds 3) {
    UpdatePrevInstr<idx:12 line_no:2>
    v31:CInt32 = IsInstance v11 v20 {
      LiveValues<2> b:v11 unc:v20
      FrameState {
        CurInstrOffset 24
        Locals<1> v11
      }
    }
    v32:CInt32[1] = LoadConst<CInt32[1]>
    v33:CBool = PrimitiveCompare<Equal> v31 v32
    v34:Bool = PrimitiveBoxBool v33
    Branch<7>
  }

  bb 7 (preds 5, 6) {
    v35:Bool = Phi<5, 6> v30 v34
    v36:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    v37:CBool = PrimitiveCompare<Equal> v35 v36
    CondBranch<1, 2> v37
  }

  bb 1 (preds 7) {
    v23:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return<ImmortalLongExact[1]> v23
  }

  bb 2 (preds 7) {
    v25:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    Return<ImmortalLongExact[2]> v25
  }
}
--- Test Name ---
LenReturnsLongExact
--- Input ---
g = [1,2,3]
def test():
  return len(g)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v3:OptObject = LoadGlobalCached<0; "len">
    v4:MortalObjectUser[builtin_function_or_method:len:0xdeadbeef] = GuardIs<0xdeadbeef> v3 {
      Descr 'LOAD_GLOBAL: len'
      LiveValues<1> b:v3
      FrameState {
        CurInstrOffset 0
      }
    }
    v5:OptObject = LoadGlobalCached<1; "g">
    v6:MortalListExact[list:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: g'
      LiveValues<2> b:v4 b:v5
      FrameState {
        CurInstrOffset 2
        Stack<1> v4
      }
    }
    v9:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v6
    v10:LongExact = PrimitiveBox<CInt64> v9 {
      LiveValues<1> s:v9
      FrameState {
        CurInstrOffset 4
      }
    }
    Return v10
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v8:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v8
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:2>
    v9:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v10:Nullptr = LoadConst<Nullptr>
    v11:OptObject = LoadGlobalCached<0; "len">
    v12:MortalObjectUser[builtin_function_or_method:len:0xdeadbeef] = GuardIs<0xdeadbeef> v11 {
      Descr 'LOAD_GLOBAL: len'
      LiveValues<2> unc:v10 b:v11
      FrameState {
        CurInstrOffset 2
      }
    }
    v13:OptObject = LoadGlobalCached<1; "g">
    v14:MortalListExact[list:0xdeadbeef] = GuardIs<0xdeadbeef> v13 {
      Descr 'LOAD_GLOBAL: g'
      LiveValues<3> unc:v10 b:v12 b:v13
      FrameState {
        CurInstrOffset 12
        Stack<2> v10 v12
      }
    }
    v18:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v14
    v19:LongExact = PrimitiveBox<CInt64> v18 {
      LiveValues<1> s:v18
      FrameState {
        CurInstrOffset 22
      }
    }
    Return v19
  }
}
--- Test Name ---
HasattrReturnsBool
--- Input ---
def test(obj):
    return hasattr(obj, "foo")
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "obj">
    v5:OptObject = LoadGlobalCached<0; "hasattr">
    v6:MortalObjectUser[builtin_function_or_method:hasattr:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: hasattr'
      LiveValues<2> b:v4 b:v5
      FrameState {
        CurInstrOffset 0
        Locals<1> v4
      }
    }
    v8:MortalUnicodeExact["foo"] = LoadConst<MortalUnicodeExact["foo"]>
    v9:Bool = VectorCall<2> v6 v4 v8 {
      LiveValues<3> b:v4 b:v6 b:v8
      FrameState {
        CurInstrOffset 6
        Locals<1> v4
      }
    }
    Return v9
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v8:Object = LoadArg<0; "obj">
    v10:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v10
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v11:CInt32 = RunPeriodicTasks {
      LiveValues<1> b:v8
      FrameState {
        CurInstrOffset 0
        Locals<1> v8
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v14:OptObject = LoadGlobalCached<0; "hasattr">
    v15:MortalObjectUser[builtin_function_or_method:hasattr:0xdeadbeef] = GuardIs<0xdeadbeef> v14 {
      Descr 'LOAD_GLOBAL: hasattr'
      LiveValues<2> b:v8 b:v14
      FrameState {
        CurInstrOffset 2
        Locals<1> v8
      }
    }
    v16:ImmortalUnicodeExact["foo"] = LoadConst<ImmortalUnicodeExact["foo"]>
    UpdatePrevInstr<idx:8 line_no:2>
    v18:Bool = VectorCall<2> v15 v8 v16 {
      LiveValues<3> b:v8 b:v15 unc:v16
      FrameState {
        CurInstrOffset 16
        Locals<1> v8
      }
    }
    Return v18
  }
}
--- Test Name ---
CompareInReturnsBool
--- Input ---
def test(x, y):
  return x in y
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v7:Bool = Compare<In> v3 v4 {
      LiveValues<2> b:v3 b:v4
      FrameState {
        CurInstrOffset 4
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "x">
    v7:Object = LoadArg<1; "y">
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v10:CInt32 = RunPeriodicTasks {
      LiveValues<2> b:v6 b:v7
      FrameState {
        CurInstrOffset 0
        Locals<2> v6 v7
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    UpdatePrevInstr<idx:3 line_no:2>
    v13:Bool = Compare<In> v6 v7 {
      LiveValues<2> b:v6 b:v7
      FrameState {
        CurInstrOffset 6
        Locals<2> v6 v7
      }
    }
    Return v13
  }
}
--- Test Name ---
CompareNotInReturnsBool
--- Input ---
def test(x, y):
  return x not in y
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v7:Bool = Compare<NotIn> v3 v4 {
      LiveValues<2> b:v3 b:v4
      FrameState {
        CurInstrOffset 4
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "x">
    v7:Object = LoadArg<1; "y">
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v10:CInt32 = RunPeriodicTasks {
      LiveValues<2> b:v6 b:v7
      FrameState {
        CurInstrOffset 0
        Locals<2> v6 v7
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    UpdatePrevInstr<idx:3 line_no:2>
    v13:Bool = Compare<NotIn> v6 v7 {
      LiveValues<2> b:v6 b:v7
      FrameState {
        CurInstrOffset 6
        Locals<2> v6 v7
      }
    }
    Return v13
  }
}
--- Test Name ---
ListAppendMethodEmitsListAppend
--- Input ---
def test():
  x = []
  x.append(1)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalListExact = MakeList<0> {
      LiveValues<1> unc:v7
      FrameState {
        CurInstrOffset 0
        Locals<1> v7
      }
    }
    v13:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v17:CInt32 = ListAppend v8 v13 {
      LiveValues<2> o:v8 unc:v13
      FrameState {
        CurInstrOffset 10
        Locals<1> v8
      }
    }
    Decref v8
    v15:NoneType = LoadConst<NoneType>
    Incref v15
    Return v15
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v11:Nullptr = LoadConst<Nullptr>
    v12:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v12
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v13:CInt32 = RunPeriodicTasks {
      LiveValues<1> unc:v11
      FrameState {
        CurInstrOffset 0
        Locals<1> v11
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v15:MortalListExact = MakeList<0> {
      LiveValues<1> unc:v11
      FrameState {
        CurInstrOffset 2
        Locals<1> v11
      }
    }
    v19:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v24:CInt32 = ListAppend v15 v19 {
      LiveValues<2> o:v15 unc:v19
      FrameState {
        CurInstrOffset 30
        Locals<1> v15
      }
    }
    UpdatePrevInstr<idx:20 line_no:3>
    Decref v15
    v21:NoneType = LoadConst<NoneType>
    Incref v21
    Return<NoneType> v21
  }
}
--- Test Name ---
AwaitedVectorCallStaticEmitsVectorCallStatic
--- Input ---
async def test():
  s = "abc"
  return await s.lower()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v12:Nullptr = LoadConst<Nullptr>
    v13:OptNoneType = InitialYield {
      LiveValues<1> unc:v12
      FrameState {
        CurInstrOffset -2
        Locals<1> v12
      }
    }
    v14:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v34:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v19:UnicodeExact = VectorCall<1, awaited, static> v34 v14 {
      LiveValues<2> b:v14 b:v34
      FrameState {
        CurInstrOffset 10
        Locals<1> v14
      }
    }
    v24:OptObject = CallCFunc<Cix_PyCoro_GetAwaitableIter> v19
    Decref v19
    v25:Object = CheckExc v24 {
      LiveValues<2> b:v14 o:v24
      FrameState {
        CurInstrOffset 10
        Locals<1> v14
      }
    }
    CondBranchCheckType<7, 8, ObjectUser[coroutine:Exact]> v25
  }

  bb 7 (preds 0) {
    v26:OptObject = CallCFunc<Cix_PyGen_yf> v25
    CondBranch<9, 8> v26
  }

  bb 9 (preds 7) {
    Decref v25
    XDecref v26
    RaiseStatic<RuntimeError, "coroutine is being awaited already", <<1> b:v14>> {
      LiveValues<1> b:v14
      FrameState {
        CurInstrOffset 10
        Locals<1> v14
      }
    }
  }

  bb 8 (preds 0, 7) {
    v27:NoneType = LoadConst<NoneType>
    SetCurrentAwaiter v25
    v30:Object = YieldFrom v27 v25 {
      LiveValues<3> b:v14 o:v25 b:v27
      FrameState {
        CurInstrOffset 10
        Locals<1> v14
        Stack<1> v25
      }
    }
    Decref v25
    Return v30
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v12:Nullptr = LoadConst<Nullptr>
    v13:OptNoneType = InitialYield {
      LiveValues<1> unc:v12
      FrameState {
        CurInstrOffset 0
        Locals<1> v12
      }
    }
    v14:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v34:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v19:UnicodeExact = VectorCall<1, awaited, static> v34 v14 {
      LiveValues<2> b:v14 b:v34
      FrameState {
        CurInstrOffset 12
        Locals<1> v14
      }
    }
    v24:OptObject = CallCFunc<Cix_PyCoro_GetAwaitableIter> v19
    Decref v19
    v25:Object = CheckExc v24 {
      LiveValues<2> b:v14 o:v24
      FrameState {
        CurInstrOffset 12
        Locals<1> v14
      }
    }
    CondBranchCheckType<7, 8, ObjectUser[coroutine:Exact]> v25
  }

  bb 7 (preds 0) {
    v26:OptObject = CallCFunc<Cix_PyGen_yf> v25
    CondBranch<9, 8> v26
  }

  bb 9 (preds 7) {
    Decref v25
    XDecref v26
    RaiseStatic<RuntimeError, "coroutine is being awaited already", <<1> b:v14>> {
      LiveValues<1> b:v14
      FrameState {
        CurInstrOffset 12
        Locals<1> v14
      }
    }
  }

  bb 8 (preds 0, 7) {
    v27:NoneType = LoadConst<NoneType>
    SetCurrentAwaiter v25
    v30:Object = YieldFrom v27 v25 {
      LiveValues<3> b:v14 o:v25 b:v27
      FrameState {
        CurInstrOffset 12
        Locals<1> v14
        Stack<1> v25
      }
    }
    Decref v25
    Return v30
  }
}
--- Test Name ---
UnicodeLowerWithMismatchedArgcountEmitsVectorCallStatic
--- Input ---
def test():
  s = "abc"
  return s.lower(1)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v14:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v12:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v13:UnicodeExact = VectorCall<2, static> v14 v7 v12 {
      LiveValues<3> b:v7 unc:v12 b:v14
      FrameState {
        CurInstrOffset 10
        Locals<1> v7
      }
    }
    Return v13
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v10:Nullptr = LoadConst<Nullptr>
    v11:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v11
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v12:CInt32 = RunPeriodicTasks {
      LiveValues<1> unc:v10
      FrameState {
        CurInstrOffset 0
        Locals<1> v10
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v14:ImmortalUnicodeExact["abc"] = LoadConst<ImmortalUnicodeExact["abc"]>
    v20:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v18:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    UpdatePrevInstr<idx:15 line_no:3>
    v19:UnicodeExact = VectorCall<2, static> v20 v14 v18 {
      LiveValues<3> unc:v14 unc:v18 b:v20
      FrameState {
        CurInstrOffset 30
        Locals<1> v14
      }
    }
    Return v19
  }
}
--- Test Name ---
UnicodeLowerEmitsCallStatic
--- Input ---
def test():
  s = "abc"
  return s.lower()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v13:OptUnicodeExact = CallStatic<unicode_lower@0xdeadbeef, 1> v6
    v14:UnicodeExact = CheckExc v13 {
      LiveValues<2> b:v6 o:v13
      FrameState {
        CurInstrOffset 8
        Locals<1> v6
      }
    }
    Return v14
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v9:Nullptr = LoadConst<Nullptr>
    v10:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v10
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v11:CInt32 = RunPeriodicTasks {
      LiveValues<1> unc:v9
      FrameState {
        CurInstrOffset 0
        Locals<1> v9
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v13:ImmortalUnicodeExact["abc"] = LoadConst<ImmortalUnicodeExact["abc"]>
    UpdatePrevInstr<idx:14 line_no:3>
    v19:OptUnicodeExact = CallStatic<unicode_lower@0xdeadbeef, 1> v13
    v20:UnicodeExact = CheckExc v19 {
      LiveValues<2> unc:v13 o:v19
      FrameState {
        CurInstrOffset 28
        Locals<1> v13
      }
    }
    Return v20
  }
}
--- Test Name ---
UnicodeRemovePrefixWithMismatchedArgcountEmitsVectorCallStatic
--- Input ---
def test():
  s = "abc"
  return s.removeprefix()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v12:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v11:Object = VectorCall<1, static> v12 v6 {
      LiveValues<2> b:v6 b:v12
      FrameState {
        CurInstrOffset 8
        Locals<1> v6
      }
    }
    Return v11
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v9:Nullptr = LoadConst<Nullptr>
    v10:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v10
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v11:CInt32 = RunPeriodicTasks {
      LiveValues<1> unc:v9
      FrameState {
        CurInstrOffset 0
        Locals<1> v9
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v13:ImmortalUnicodeExact["abc"] = LoadConst<ImmortalUnicodeExact["abc"]>
    v18:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    UpdatePrevInstr<idx:14 line_no:3>
    v17:Object = VectorCall<1, static> v18 v13 {
      LiveValues<2> unc:v13 b:v18
      FrameState {
        CurInstrOffset 28
        Locals<1> v13
      }
    }
    Return v17
  }
}
--- Test Name ---
UnicodeRemovePrefixEmitsCallStatic
--- Input ---
def test():
  s = "abc"
  return s.removeprefix("a")
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v12:MortalUnicodeExact["a"] = LoadConst<MortalUnicodeExact["a"]>
    v15:OptObject = CallStatic<unicode_removeprefix@0xdeadbeef, 2> v7 v12
    v16:Object = CheckExc v15 {
      LiveValues<2> b:v7 o:v15
      FrameState {
        CurInstrOffset 10
        Locals<1> v7
      }
    }
    Return v16
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v10:Nullptr = LoadConst<Nullptr>
    v11:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v11
  }

  bb 2 (preds 0) {
    UpdatePrevInstr<idx:0 line_no:1>
    v12:CInt32 = RunPeriodicTasks {
      LiveValues<1> unc:v10
      FrameState {
        CurInstrOffset 0
        Locals<1> v10
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v14:ImmortalUnicodeExact["abc"] = LoadConst<ImmortalUnicodeExact["abc"]>
    v18:ImmortalUnicodeExact["a"] = LoadConst<ImmortalUnicodeExact["a"]>
    UpdatePrevInstr<idx:15 line_no:3>
    v21:OptObject = CallStatic<unicode_removeprefix@0xdeadbeef, 2> v14 v18
    v22:Object = CheckExc v21 {
      LiveValues<2> unc:v14 o:v21
      FrameState {
        CurInstrOffset 30
        Locals<1> v14
      }
    }
    Return v22
  }
}
--- End ---
