--- Test Suite Name ---
SimplifyUsesGuardTypes
--- Passes ---
Simplify
--- Test Name ---
SimplifyBinaryOpSubscriptUsesGuardTypes
--- Input ---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "x">
    v1 = LoadArg<1; "y">
    v2 = GuardType<ListExact> v0
    v3 = GuardType<LongExact> v1
    v4 = BinaryOp<Subscript> v2 v3 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v0 v1
      }
    }
    v5 = Assign v4
    v6 = LoadConst<NoneType>
    Return v6
  }
}
--- Expected 3.10 ---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:ListExact = GuardType<ListExact> v0 {
      FrameState {
        CurInstrOffset -2
      }
    }
    v3:LongExact = GuardType<LongExact> v1 {
      FrameState {
        CurInstrOffset -2
      }
    }
    UseType<ListExact> v2
    UseType<LongExact> v3
    v7:CInt64 = IndexUnbox<IndexError> v3
    v8:CInt64 = IsNegativeAndErrOccurred v7 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v0 v1
      }
    }
    v9:CInt64 = CheckSequenceBounds v2 v7 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v0 v1
      }
    }
    v10:CPtr = LoadField<ob_item@24, CPtr, borrowed> v2
    v11:Object = LoadArrayItem v10 v9 v2
    v6:NoneType = LoadConst<NoneType>
    Return v6
  }
}
--- Expected 3.12 ---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:ListExact = GuardType<ListExact> v0 {
      FrameState {
        CurInstrOffset -2
      }
    }
    v3:LongExact = GuardType<LongExact> v1 {
      FrameState {
        CurInstrOffset -2
      }
    }
    UseType<ListExact> v2
    UseType<LongExact> v3
    v7:CInt64 = IndexUnbox<IndexError> v3
    v8:CInt64 = IsNegativeAndErrOccurred v7 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v0 v1
      }
    }
    v9:CInt64 = CheckSequenceBounds v2 v7 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v0 v1
      }
    }
    v10:CPtr = LoadField<ob_item@24, CPtr, borrowed> v2
    v11:Object = LoadArrayItem v10 v9 v2
    v6:NoneType = LoadConst<NoneType>
    Return v6
  }
}
--- Test Name ---
IsTruthyUsesGuardTypes
--- Input ---
# HIR
fun test {
  bb 0 {
    v0:Object = LoadArg<0; "x">
    v1:Object = LoadArg<1; "y">
    v2:NoneType = GuardType<NoneType> v0
    v3:CInt32 = IsTruthy v2 {
      FrameState {
        CurInstrOffset 4
        Locals<2> v2 v1
      }
    }
    CondBranch<2, 1> v3
  }

  bb 1 (preds 0) {
    v4:NoneType = LoadConst<NoneType>
    v5:NoneType = Assign v4
    Branch<2>
  }

  bb 2 (preds 0, 1) {
    v6:Object = Phi<0, 1> v1 v5
    Return v6
  }
}
--- Expected 3.10 ---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v7:NoneType = GuardIs<0xdeadbeef> v0 {
    }
    UseType<NoneType> v7
    v8:CInt32[0] = LoadConst<CInt32[0]>
    v4:NoneType = LoadConst<NoneType>
    Return v4
  }
}
--- Expected 3.12 ---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v7:NoneType = GuardIs<0xdeadbeef> v0 {
    }
    UseType<NoneType> v7
    v8:CInt32[0] = LoadConst<CInt32[0]>
    v4:NoneType = LoadConst<NoneType>
    Return v4
  }
}
--- End ---
