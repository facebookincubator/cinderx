// -*- mode: c++ -*- vi: set ft=cpp:
// Copyright (c) Meta Platforms, Inc. and affiliates.

// This file is processed by UpstreamBorrow.py. To see the generated output:
// buck build -m ovr_config//third-party/python/constraints:3.14 \
//     --out=- fbcode//cinderx/Jit:generators-borrowed_gen_borrowed.c

// clang-format off

#include "cinderx/Jit/generators_borrowed.h"

#include "internal/pycore_object.h"
#include "internal/pycore_genobject.h"

#include "cinderx/Jit/generators_core.h"

#undef _PyObject_GC_TRACK
#define _PyObject_GC_TRACK PyObject_GC_Track

// @Borrow CPP directives noinclude from Objects/iterobject.c
// @Borrow function anextawaitable_dealloc from Objects/iterobject.c
void Ci_anextawaitable_dealloc(anextawaitableobject* obj) {
  PyTypeObject *type = Py_TYPE(obj);
  anextawaitable_dealloc((PyObject*)obj);
  // Heap types increment their type, so we need to decrement it here:
  Py_DECREF(type);
}

// @Borrow function anextawaitable_traverse from Objects/iterobject.c
int Ci_anextawaitable_traverse(anextawaitableobject* obj, visitproc visit, void* arg) {
  return anextawaitable_traverse((PyObject*)obj, visit, arg);
}

// We want to use anextawaitable_getiter but make it aware of JITed co-routines.
// This involves redefining _PyCoro_GetAwaitableIter to be JIT aware and then
// updating PyCoro_CheckExact to also recognize JIT co-routines.
static inline bool coro_inexact(PyObject* obj) {
  return JitCoro_CheckExact(obj) || PyCoro_CheckExact(obj);
}

#define _PyCoro_GetAwaitableIter JitCoro_GetAwaitableIter
#pragma push_macro("PyCoro_CheckExact")
#undef PyCoro_CheckExact
#define PyCoro_CheckExact(OBJ) coro_inexact(OBJ)

// @Borrow function anextawaitable_getiter from Objects/iterobject.c

#undef _PyCoro_GetAwaitableIter
#pragma pop_macro("PyCoro_CheckExact")

// @Borrow function anextawaitable_proxy from Objects/iterobject.c
// @Borrow function anextawaitable_iternext from Objects/iterobject.c
PyObject* Ci_anextawaitable_iternext(anextawaitableobject* obj) {
  return anextawaitable_iternext((PyObject*)obj);
}

// @Borrow function anextawaitable_send from Objects/iterobject.c
PyObject* Ci_anextawaitable_send(anextawaitableobject* obj, PyObject* arg) {
  return anextawaitable_send((PyObject*)obj, arg);
}

// @Borrow function anextawaitable_throw from Objects/iterobject.c
PyObject* Ci_anextawaitable_throw(
    anextawaitableobject* obj,
    PyObject* arg) {
  return anextawaitable_throw((PyObject*)obj, arg);
}

// @Borrow function anextawaitable_close from Objects/iterobject.c
PyObject* Ci_anextawaitable_close(
    anextawaitableobject* obj,
    PyObject* arg) {
    return anextawaitable_close((PyObject*)obj, arg);
}
