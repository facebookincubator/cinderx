# Copyright (c) Meta Platforms, Inc. and affiliates.

from asyncio import iscoroutinefunction
from typing import Dict, Generic, List, TypeVar

RAND_MAX = (1 << 31) - 1

def box(x):
    return x

def unbox(x):
    return x

def cast(typ, x):
    return x

T = TypeVar("T")

class Array(Generic[T]):
    def __class_getitem__(cls, index):
        return cls

class Vector(Generic[T]):
    def __class_getitem__(cls, index):
        return cls

class CheckedDict(dict):
    def __class_getitem__(cls, index):
        return cls

class CheckedList(list):
    def __class_getitem__(cls, index):
        return cls

class uint8(int): pass
class int8(int): pass

class uint16(int): pass
class int16(int): pass

class uint32(int): pass
class int32(int): pass

class uint64(int): pass
class int64(int): pass

class double(float): pass

def dynamic_return(func):
    return func

def allow_weakrefs(klass):
    return klass

def inline(f): return f

def native(so_path):
    def _inner_native(func):
        return func

    return _inner_native

def rand():
    return 42



class ContextDecorator:
    def __enter__(self) -> None:
        return self

    def __exit__(self, exc_type: object, exc_value: object, traceback: object) -> bool:
        return False

    def __call__(self, func):
        if not iscoroutinefunction(func):
            def _no_profile_inner(*args, **kwds):
                with self._recreate_cm():
                    return func(*args, **kwds)

            return _no_profile_inner
        else:
            async def _no_profile_inner(*args, **kwds):
                with self._recreate_cm():
                    return await func(*args, **kwds)

            return _no_profile_inner


class Enum: pass
