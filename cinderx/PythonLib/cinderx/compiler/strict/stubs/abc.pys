# Copyright (c) Meta Platforms, Inc. and affiliates.

class ABCMeta(type):
    def __new__(mcls, name, bases, namespace, **kwargs):
        cls = super().__new__(mcls, name, bases, namespace, **kwargs)
        cls._abc_registry = set()
        return cls

    def register(cls, subclass):
        if not isinstance(subclass, type):
            raise TypeError("Can only register classes")
        if issubclass(subclass, cls):
            return subclass  # Already a subclass
        if issubclass(cls, subclass):
            raise RuntimeError("Refusing to create an inheritance cycle")
        cls._abc_registry.add(subclass)
        return subclass

    def __instancecheck__(cls, instance):
        """Override for isinstance(instance, cls)."""
        subclass = instance.__class__
        subtype = type(instance)
        if subtype is subclass:
            return cls.__subclasscheck__(subclass)
        return any(cls.__subclasscheck__(c) for c in (subclass, subtype))

    def __subclasscheck__(cls, subclass):
        """Override for issubclass(subclass, cls)."""
        if not isinstance(subclass, type):
            raise TypeError('issubclass() arg 1 must be a class')
        ok = cls.__subclasshook__(subclass)
        if ok is not NotImplemented:
            return ok
        if cls in getattr(subclass, '__mro__', ()):
            return True
        for rcls in cls._abc_registry:
            if issubclass(subclass, rcls):
                return True
        # TODO cannot handle __subclasses__ for now
        return False


@implicit
def update_abstractmethods(): ...

@implicit
class ABC:
    pass


@implicit
def abstractmethod(): ...


@implicit
class abstractclassmethod:
    ...


@implicit
class abstractstaticmethod:
    ...


@implicit
class abstractproperty:
    ...
