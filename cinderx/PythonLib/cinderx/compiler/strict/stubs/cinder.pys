# Copyright (c) Meta Platforms, Inc. and affiliates.
# @oncall strictmod

from __future__ import annotations

from abc import ABC
from __strict__ import _mark_cached_property
from typing import (
    TYPE_CHECKING,
    Awaitable,
    Callable,
    Generic,
    Optional,
    Type,
    TypeVar,
    final,
    overload,
)
from weakref import WeakKeyDictionary


if TYPE_CHECKING:

    @final
    class Descriptor(ABC):
        __name__: str
        __objclass__: Type[object]

        def __get__(self, inst: object, ctx: Optional[Type[object]] = None) -> object:
            pass

        def __set__(self, inst: object, value: object) -> None:
            pass


class cached_property:
    """fall back implementation of cached_property that supports slots if
    Cinder's cached_property implementation isn't available"""

    def __init__(
        self, func: Callable[[object], object], slot: Optional[Descriptor] = None
    ) -> None:
        _mark_cached_property(func, False, cached_property)
        self.func = func
        self.slot = slot
        self.name: str = getattr(slot, "__name__", func.__name__)

    @property
    def __doc__(self) -> Optional[str]:
        return self.func.__doc__

    def __get__(self, inst: object, ctx: Type[object]) -> object:
        if inst is None:
            return self

        slot = self.slot
        if slot is not None:
            try:
                res = slot.__get__(inst, ctx)
            except AttributeError:
                res = self.func(inst)
                slot.__set__(inst, res)
        elif self.name in inst.__dict__:
            return inst.__dict__[self.name]
        else:
            res = self.func(inst)
            inst.__dict__[self.name] = res

        return res

    def __set__(self, inst: object, value: object) -> None:
        slot = self.slot
        if slot is not None:
            slot.__set__(inst, value)
        else:
            inst.__dict__[self.name] = value


@final
class cached_classproperty:
    """fall back implementation of cached_property that supports slots if
    Cinder's cached_classproperty implementation isn't available"""

    def __init__(self, func: Callable[[object], object]) -> None:
        self.func = func
        self.name: str = func.__name__
        self.dict: WeakKeyDictionary[Type[object], object] = WeakKeyDictionary()

    @property
    def __doc__(self) -> Optional[str]:
        return self.func.__doc__

    def __get__(self, inst: object, ctx: Type[object]) -> object:
        if ctx is None:
            return self
        if ctx in self.dict:
            res = self.dict[ctx]
        else:
            res = self.dict[ctx] = self.func(ctx)

        get = getattr(res, "__get__", None)
        if get is not None:
            return get(inst, ctx)
        return res


_TClass = TypeVar("_TClass")
_TReturnType = TypeVar("_TReturnType")
_TAwaitableReturnType = TypeVar("_TAwaitableReturnType", bound=Awaitable[object])


class BaseCachedProperty(Generic[_TClass, _TReturnType]):
    fget: Callable[[_TClass], _TReturnType] = ...
    __name__: str = ...

    def __init__(self, f: Callable[[_TClass], _TReturnType], doc: str = ...) -> None:
        ...

    @overload
    def __get__(
        self, obj: None, cls: Type[_TClass]
    ) -> BaseCachedProperty[_TClass, _TReturnType]:
        ...

    @overload
    def __get__(self, obj: _TClass, cls: Type[_TClass]) -> _TReturnType:
        ...

    def __get__(
        self, obj: Optional[_TClass], cls: Type[_TClass]
    ) -> BaseCachedProperty[_TClass, _TReturnType] | _TReturnType:
        ...


class async_cached_property(BaseCachedProperty):
    def __init__(self, func, slot=None):
        _mark_cached_property(func, True, async_cached_property)
        self.func = func
        self.slot = slot
        self.name: str = getattr(slot, "__name__", func.__name__)

    def __get__(self, obj, cls):
        if obj is None:
            return self
        lazy_value = AsyncLazyValue(self.func, obj)
        setattr(obj, self.__name__, lazy_value)
        return lazy_value


class cached_classproperty(BaseCachedProperty[_TClass, _TReturnType]):
    def __get__(self, obj: Optional[_TClass], cls: Type[_TClass]) -> _TReturnType:
        ...


class thread_safe_cached_classproperty(BaseCachedProperty[_TClass, _TReturnType]):
    def __get__(self, obj: Optional[_TClass], cls: Type[_TClass]) -> _TReturnType:
        ...


class async_cached_classproperty(BaseCachedProperty[_TClass, _TAwaitableReturnType]):
    def __get__(
        self, obj: Optional[_TClass], cls: Type[_TClass]
    ) -> _TAwaitableReturnType:
        ...
