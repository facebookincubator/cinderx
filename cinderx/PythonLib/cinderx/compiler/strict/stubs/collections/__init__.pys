# Copyright (c) Meta Platforms, Inc. and affiliates.

import collections.abc as abc
import _collections_abc
from reprlib import recursive_repr as _recursive_repr
import sys as _sys
from keyword import iskeyword as _iskeyword
from operator import itemgetter as _itemgetter

# a mock for weakref.proxy
def _proxy(object, *args):
    return object

@implicit
class Counter:
    ...

@implicit
class ChainMap:
    ...

@implicit
class _OrderedDictKeysView:
    ...

@implicit
class _OrderedDictItemsView:
    ...

@implicit
class _OrderedDictValuesView:
    ...

@implicit
class _Link:
    ...

@implicit
class OrderedDict:
    ...

#namedtuple
_tuplegetter = lambda index, doc: property(_itemgetter(index), doc=doc)
_nt_itemgetters = {}

@implicit
def namedtuple():
    ...

class defaultdict(dict):
    def __init__(self, default_factory = None, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.default_factory = default_factory

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        def_value = self.default_factory()
        self.__setitem__(key, def_value)
        return def_value
