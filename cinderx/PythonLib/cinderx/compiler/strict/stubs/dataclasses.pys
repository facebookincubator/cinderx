# Copyright (c) Meta Platforms, Inc. and affiliates.

import abc
import types
import keyword
import functools
from types import FunctionType, GenericAlias


_bltin_isinstance = isinstance


def isinstance(obj, cls):
    # allow checking if type parameters builtins
    if cls in (tuple, list, dict, str):
        return loose_isinstance(obj, cls)
    return _bltin_isinstance(obj, cls)

class FrozenInstanceError(AttributeError): pass

@implicit
class _HAS_DEFAULT_FACTORY_CLASS:
    ...
_HAS_DEFAULT_FACTORY = _HAS_DEFAULT_FACTORY_CLASS()

class _MISSING_TYPE:
    pass
MISSING = _MISSING_TYPE()

_EMPTY_METADATA = types.MappingProxyType({})

@implicit
class _KW_ONLY_TYPE: ...
KW_ONLY = _KW_ONLY_TYPE()

@implicit
class _FIELD_BASE:
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return self.name
_FIELD = _FIELD_BASE('_FIELD')
_FIELD_CLASSVAR = _FIELD_BASE('_FIELD_CLASSVAR')
_FIELD_INITVAR = _FIELD_BASE('_FIELD_INITVAR')

_FIELDS = '__dataclass_fields__'
_PARAMS = '__dataclass_params__'
_POST_INIT_NAME = '__post_init__'

@implicit
class InitVar:
    ...

@implicit
class Field:
    ...

@implicit
class _DataclassParams:
    ...

@implicit
def field():
    ...

@implicit
def _fields_in_init_order():
    ...

@implicit
def _tuple_str():
    ...

@implicit
def _recursive_repr():
    ...

# [strict modules]: we removed BULTINS here
def _create_fn(name, args, body, *, globals=None, locals=None,
               return_type=MISSING):
    if locals is None:
        locals = {}
    return_annotation = ''
    if return_type is not MISSING:
        locals['_return_type'] = return_type
        return_annotation = '->_return_type'
    args = ','.join(args)
    body = '\n'.join(f'  {b}' for b in body)

    txt = f' def {name}({args}){return_annotation}:\n{body}'

    local_vars = ', '.join(locals.keys())
    txt = f"def __create_fn__({local_vars}):\n{txt}\n return {name}"

    ns = {}
    exec(txt, globals, ns)
    return ns['__create_fn__'](**locals)

# Note: we modified this and removed frozen handling
def _field_assign(frozen, name, value, self_name):
    return f'{self_name}.{name}={value}'

@implicit
def _field_init():
    ...

@implicit
def _init_param():
    ...

@implicit
def _init_fn():
    ...

@implicit
def _repr_fn():
    ...

@implicit
def _frozen_get_del_attr(): ...

@implicit
def _cmp_fn():
    ...

@implicit
def _hash_fn():
    ...

@implicit
def _is_classvar():
    ...

@implicit
def _is_initvar():
    ...

# [strict modules]: We use a simpler check here
# that's just substring based to avoid dynamic imports
# and regex. However, we know that the dynamic import of typing
# and using regex match is safe/strict
def _str_isclassvar(a_type):
    parts = a_type.split(".", 1)
    if len(parts) == 2:
        varName = parts[1]
    else:
        varName = parts[0]
    return varName.startswith("ClassVar")

def _str_isinitvar(a_type):
    parts = a_type.split(".", 1)
    if len(parts) == 2:
        varName = parts[1]
    else:
        varName = parts[0]
    return varName.startswith("InitVar")

def _str_iskwonly(a_type):
    parts = a_type.split(".", 1)
    if len(parts) == 2:
        varName = parts[1]
    else:
        varName = parts[0]
    return varName.startswith("KW_ONLY")

@implicit
def _is_kw_only(): ...

# [strict modules]: Here we used __strict_tryimport__
# to simulate checking sys.modules and only get the module
# if it is already imported
def _get_field(cls, a_name, a_type, default_kw_only):
    default = getattr(cls, a_name, MISSING)
    if isinstance(default, Field):
        f = default
    else:
        if isinstance(default, types.MemberDescriptorType):
            default = MISSING
        f = field(default=default)

    f.name = a_name
    f.type = a_type
    f._field_type = _FIELD

    typing = __strict_tryimport__('typing')
    if typing:
        if (_is_classvar(a_type, typing)
            or (isinstance(f.type, str) and _str_isclassvar(f.type))):
            f._field_type = _FIELD_CLASSVAR

    if f._field_type is _FIELD:
        # The module we're checking against is the module we're
        # currently in (dataclasses.py).
        dataclasses = __strict_tryimport__("dataclasses")
        if (_is_initvar(a_type, dataclasses)
            or (isinstance(f.type, str) and _str_isinitvar(f.type))):
            f._field_type = _FIELD_INITVAR

    if f._field_type in (_FIELD_CLASSVAR, _FIELD_INITVAR):
        if f.default_factory is not MISSING:
            raise TypeError(f'field {f.name} cannot have a '
                            'default factory')

    if f._field_type in (_FIELD, _FIELD_INITVAR):
        if f.kw_only is MISSING:
            f.kw_only = default_kw_only

    if f._field_type is _FIELD and isinstance(f.default, (list, dict, set)):
        raise ValueError(f'mutable default {type(f.default)} for field '
                         f'{f.name} is not allowed: use default_factory')
    return f

@implicit
def _set_qualname():
    ...

@implicit
def _set_new_attribute():
    ...


@implicit
def _hash_set_none():
    ...

@implicit
def _hash_add():
    ...

@implicit
def _hash_exception():
    ...


_hash_action = {(False, False, False, False): None,
                (False, False, False, True ): None,
                (False, False, True,  False): None,
                (False, False, True,  True ): None,
                (False, True,  False, False): _hash_set_none,
                (False, True,  False, True ): None,
                (False, True,  True,  False): _hash_add,
                (False, True,  True,  True ): None,
                (True,  False, False, False): _hash_add,
                (True,  False, False, True ): _hash_exception,
                (True,  False, True,  False): _hash_add,
                (True,  False, True,  True ): _hash_exception,
                (True,  True,  False, False): _hash_add,
                (True,  True,  False, True ): _hash_exception,
                (True,  True,  True,  False): _hash_add,
                (True,  True,  True,  True ): _hash_exception,
                }


# [strict modules]: here we used __strict_tryimport__ for
# checking sys.modules
def _process_class(cls, init, repr, eq, order, unsafe_hash, frozen,
    match_args, kw_only, slots):
    fields = {}

    _cls_module = __strict_tryimport__(cls.__module__)
    if _cls_module:
        globals = _cls_module.__dict__
    else:
        globals = {}

    setattr(cls, _PARAMS, _DataclassParams(init, repr, eq, order,
                                           unsafe_hash, frozen))

    any_frozen_base = False
    has_dataclass_bases = False
    for b in cls.__mro__[-1:0:-1]:
        base_fields = getattr(b, _FIELDS, None)
        if base_fields is not None:
            has_dataclass_bases = True
            for f in base_fields.values():
                fields[f.name] = f
            if getattr(b, _PARAMS).frozen:
                any_frozen_base = True

    cls_annotations = cls.__dict__.get('__annotations__', {})

    cls_fields = []

    KW_ONLY_seen = False
    dataclasses = __strict_tryimport__("dataclasses")
    for name, type in cls_annotations.items():
        # See if this is a marker to change the value of kw_only.
        if (_is_kw_only(type, dataclasses)
            or (isinstance(type, str) and _str_iskwonly(type))):
            # Switch the default to kw_only=True, and ignore this
            # annotation: it's not a real field.
            if KW_ONLY_seen:
                raise TypeError(f'{name!r} is KW_ONLY, but KW_ONLY '
                                'has already been specified')
            KW_ONLY_seen = True
            kw_only = True
        else:
            # Otherwise it's a field of some type.
            cls_fields.append(_get_field(cls, name, type, kw_only))

    for f in cls_fields:
        fields[f.name] = f
        if isinstance(getattr(cls, f.name, None), Field):
            if f.default is MISSING:
                delattr(cls, f.name)
            else:
                setattr(cls, f.name, f.default)

    for name, value in cls.__dict__.items():
        if isinstance(value, Field) and not name in cls_annotations:
            raise TypeError(f'{name!r} is a field but has no type annotation')

    setattr(cls, _FIELDS, fields)
    class_hash = cls.__dict__.get('__hash__', MISSING)
    has_explicit_hash = not (class_hash is MISSING or
                             (class_hash is None and '__eq__' in cls.__dict__))

    if order and not eq:
        raise ValueError('eq must be true if order is true')

    all_init_fields = [f for f in fields.values()
                       if f._field_type in (_FIELD, _FIELD_INITVAR)]
    (std_init_fields,
     kw_only_init_fields) = _fields_in_init_order(all_init_fields)

    if init:
        has_post_init = hasattr(cls, _POST_INIT_NAME)

        _set_new_attribute(cls, '__init__',
                           _init_fn(all_init_fields,
                                    std_init_fields,
                                    kw_only_init_fields,
                                    frozen,
                                    has_post_init,
                                    '__dataclass_self__' if 'self' in fields
                                            else 'self',
                                    globals,
                                    slots,
                          ))

    field_list = [f for f in fields.values() if f._field_type is _FIELD]

    if repr:
        flds = [f for f in field_list if f.repr]
        _set_new_attribute(cls, '__repr__', _repr_fn(flds, globals))

    if eq:
        flds = [f for f in field_list if f.compare]
        self_tuple = _tuple_str('self', flds)
        other_tuple = _tuple_str('other', flds)
        _set_new_attribute(cls, '__eq__',
                           _cmp_fn('__eq__', '==',
                                   self_tuple, other_tuple,
                                   globals=globals))

    if order:
        flds = [f for f in field_list if f.compare]
        self_tuple = _tuple_str('self', flds)
        other_tuple = _tuple_str('other', flds)
        for name, op in [('__lt__', '<'),
                         ('__le__', '<='),
                         ('__gt__', '>'),
                         ('__ge__', '>='),
                         ]:
            if _set_new_attribute(cls, name,
                                  _cmp_fn(name, op, self_tuple, other_tuple,
                                          globals=globals)):
                raise TypeError(f'Cannot overwrite attribute {name} '
                                f'in class {cls.__name__}. Consider using '
                                'functools.total_ordering')

    hash_action = _hash_action[bool(unsafe_hash),
                               bool(eq),
                               bool(frozen),
                               has_explicit_hash]
    if hash_action:
        cls.__hash__ = hash_action(cls, field_list, globals)

    if match_args:
        _set_new_attribute(cls, '__match_args__',
                           tuple(f.name for f in std_init_fields))

    if slots:
        cls = _add_slots(cls, frozen)

    abc.update_abstractmethods(cls)

    return cls

@implicit
def dataclass():
    ...

@implicit
def fields():
    ...

@implicit
def _is_dataclass_instance(obj):
    ...

@implicit
def is_dataclass(obj):
    ...

@implicit
def asdict(obj, *, dict_factory=dict):
    ...


def _asdict_inner(obj, dict_factory):
    if _is_dataclass_instance(obj):
        result = []
        for f in fields(obj):
            value = _asdict_inner(getattr(obj, f.name), dict_factory)
            result.append((f.name, value))
        return dict_factory(result)
    elif isinstance(obj, tuple) and hasattr(obj, '_fields'):
        return type(obj)(*[_asdict_inner(v, dict_factory) for v in obj])
    elif isinstance(obj, (list, tuple)):
        return type(obj)(_asdict_inner(v, dict_factory) for v in obj)
    elif isinstance(obj, dict):
        return type(obj)((_asdict_inner(k, dict_factory),
                          _asdict_inner(v, dict_factory))
                         for k, v in obj.items())
    else:
        return __strict_copy__(obj)


@implicit
def astuple():
    ...


def _astuple_inner(obj, tuple_factory):
    if _is_dataclass_instance(obj):
        result = []
        for f in fields(obj):
            value = _astuple_inner(getattr(obj, f.name), tuple_factory)
            result.append(value)
        return tuple_factory(result)
    elif isinstance(obj, tuple) and hasattr(obj, '_fields'):
        return type(obj)(*[_astuple_inner(v, tuple_factory) for v in obj])
    elif isinstance(obj, (list, tuple)):
        return type(obj)(_astuple_inner(v, tuple_factory) for v in obj)
    elif isinstance(obj, dict):
        return type(obj)((_astuple_inner(k, tuple_factory), _astuple_inner(v, tuple_factory))
                          for k, v in obj.items())
    else:
        return __strict_copy__(obj)

@implicit
def make_dataclass():
    ...


@implicit
def replace():
    ...
