# Copyright (c) Meta Platforms, Inc. and affiliates.

import sys
from types import MappingProxyType, DynamicClassAttribute


_auto_null = object()
@implicit
class auto:
    ...

@implicit
def _make_class_unpicklable():
    ...

@implicit
def _is_sunder():
    ...

@implicit
def _is_private():
    ...

@implicit
def _is_dunder():
    ...

@implicit
def _is_descriptor():
    ...

Enum = None

@implicit
class _EnumDict:
    ...

@implicit
class EnumMeta:
    ...


# cannot implicit because there are existing assignments to Enum above
class Enum(metaclass=EnumMeta):
    def __new__(cls, value):
        if type(value) is cls:
            return value
        try:
            return cls._value2member_map_[value]
        except KeyError:
            pass
        except TypeError:
            for member in cls._member_map_.values():
                if member._value_ == value:
                    return member
        try:
            exc = None
            result = cls._missing_(value)
        except Exception as e:
            exc = e
            result = None
        if isinstance(result, cls):
            return result
        else:
            ve_exc = ValueError("%r is not a valid %s" % (value, cls.__name__))
            if result is None and exc is None:
                raise ve_exc
            elif exc is None:
                exc = TypeError(
                        'error in %s._missing_: returned %r instead of None or a valid member'
                        % (cls.__name__, result)
                        )
            exc.__context__ = ve_exc
            raise exc

    def _generate_next_value_(name, start, count, last_values):
        for last_value in reversed(last_values):
            try:
                return last_value + 1
            except TypeError:
                pass
        else:
            return start

    @classmethod
    def _missing_(cls, value):
        raise ValueError("%r is not a valid %s" % (value, cls.__name__))

    def __repr__(self):
        return "<%s.%s: %r>" % (
                self.__class__.__name__, self._name_, self._value_)

    def __str__(self):
        return "%s.%s" % (self.__class__.__name__, self._name_)

    def __dir__(self):
        added_behavior = [
                m
                for cls in self.__class__.mro()
                for m in cls.__dict__
                if m[0] != '_' and m not in self._member_map_
                ]
        return (['__class__', '__doc__', '__module__'] + added_behavior)

    def __format__(self, format_spec):
        if self._member_type_ is object:
            cls = str
            val = str(self)
        else:
            cls = self._member_type_
            val = self._value_
        return cls.__format__(val, format_spec)

    def __hash__(self):
        return hash(self._name_)

    def __reduce_ex__(self, proto):
        return self.__class__, (self._value_, )

    @DynamicClassAttribute
    def name(self):
        """The name of the Enum member."""
        return self._name_

    @DynamicClassAttribute
    def value(self):
        """The value of the Enum member."""
        return self._value_

@implicit
class IntEnum:
    ...

@implicit
def _reduce_ex_by_name():
    ...

@implicit
class Flag:
    ...

@implicit
class IntFlag:
    ...


@implicit
def _high_bit():
    ...

@implicit
def unique():
    ...

@implicit
def _decompose():
    ...
