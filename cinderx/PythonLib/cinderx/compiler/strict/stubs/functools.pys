# Copyright (c) Meta Platforms, Inc. and affiliates.

from collections import namedtuple
from reprlib import recursive_repr

WRAPPER_ASSIGNMENTS =  ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
WRAPPER_UPDATES = ('__dict__',)


@implicit
def update_wrapper(): ...
@implicit
def wraps(): ...
@implicit
class partial:
    pass

@implicit
def _unwrap_partial():
    ...

@implicit
def _gt_from_lt(): ...
@implicit
def _le_from_lt(): ...
@implicit
def _ge_from_lt(): ...
@implicit
def _ge_from_le(): ...
@implicit
def _lt_from_le(): ...
@implicit
def _gt_from_le(): ...
@implicit
def _lt_from_gt(): ...
@implicit
def _ge_from_gt(): ...
@implicit
def _le_from_gt(): ...
@implicit
def _le_from_ge(): ...
@implicit
def _gt_from_ge(): ...
@implicit
def _lt_from_ge(): ...

_convert = {
    '__lt__': [('__gt__', _gt_from_lt),
               ('__le__', _le_from_lt),
               ('__ge__', _ge_from_lt)],
    '__le__': [('__ge__', _ge_from_le),
               ('__lt__', _lt_from_le),
               ('__gt__', _gt_from_le)],
    '__gt__': [('__lt__', _lt_from_gt),
               ('__ge__', _ge_from_gt),
               ('__le__', _le_from_gt)],
    '__ge__': [('__le__', _le_from_ge),
               ('__gt__', _gt_from_ge),
               ('__lt__', _lt_from_ge)]
}

_CacheInfo = namedtuple("CacheInfo", ["hits", "misses", "maxsize", "currsize"])

def total_ordering(cls):
    """Class decorator that fills in missing ordering methods"""
    # Find user-defined comparisons (not those inherited from object).
    roots = {op for op in _convert if getattr(cls, op, None) is not getattr(object, op, None)}
    if not roots:
        raise ValueError('must define at least one ordering operation: < > <= >=')
    root = max(roots)       # prefer __lt__ to __le__ to __gt__ to __ge__
    for opname, opfunc in _convert[root]:
        if opname not in roots:
            setattr(cls, opname, opfunc)
    return cls

for v in _convert.values():
    for opname, opfunc in v:
        opfunc.__name__ = opname

def _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo):
    # This is a minimal implementation of this which allows the wrap
    # to proceed but doesn't allow the lru_cache function to be called
    # in top level code
    def wrapper(*args, **kwds):
        raise Exception("lru cache cannot be called at the top-level in a strict module")

    return wrapper

@implicit
def lru_cache(): ...
