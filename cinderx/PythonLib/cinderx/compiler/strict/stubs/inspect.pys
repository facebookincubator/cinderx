# Copyright (c) Meta Platforms, Inc. and affiliates.

import enum
import types
import functools

CO_OPTIMIZED = 1
CO_NEWLOCALS = 2
CO_VARARGS = 4
CO_VARKEYWORDS=8
CO_NESTED=16
CO_GENERATOR=32
CO_NOFREE=64
CO_COROUTINE=128
CO_ITERABLE_COROUTINE=256
CO_ASYNC_GENERATOR=512

OrderedDict = dict

@implicit
def get_annotations(): ...

@implicit
def isbuiltin(object):
    ...

@implicit
def ismethod(object):
    ...

@implicit
def ismethoddescriptor(object):
    ...

@implicit
def isfunction(object):
    ...

@implicit
def isclass(object):
    ...

@implicit
def isroutine(object):
    ...

@implicit
def isdatadescriptor(object):
    ...

@implicit
def _signature_is_functionlike():
    ...

@implicit
def _has_code_flag():
    ...

@implicit
def isgeneratorfunction():
    ...

@implicit
def iscoroutinefunction():
    ...

# Implemented here to avoid use of id()
def unwrap(func, *, stop=None):
    if stop is None:
        def _is_wrapper(f):
            return hasattr(f, '__wrapped__')
    else:
        def _is_wrapper(f):
            return hasattr(f, '__wrapped__') and not stop(f)

    while _is_wrapper(func):
        func = func.__wrapped__
    return func

@implicit
def _signature_from_function():
    ...

@implicit
def _signature_from_callable(): ...

@implicit
class _void:
    ...

@implicit
class _empty:
    ...

@implicit
class _ParameterKind:
    ...

_POSITIONAL_ONLY         = _ParameterKind.POSITIONAL_ONLY
_POSITIONAL_OR_KEYWORD   = _ParameterKind.POSITIONAL_OR_KEYWORD
_VAR_POSITIONAL          = _ParameterKind.VAR_POSITIONAL
_KEYWORD_ONLY            = _ParameterKind.KEYWORD_ONLY
_VAR_KEYWORD             = _ParameterKind.VAR_KEYWORD

_PARAM_NAME_MAPPING = {
    _POSITIONAL_ONLY: 'positional-only',
    _POSITIONAL_OR_KEYWORD: 'positional or keyword',
    _VAR_POSITIONAL: 'variadic positional',
    _KEYWORD_ONLY: 'keyword-only',
    _VAR_KEYWORD: 'variadic keyword'
}

_get_paramkind_descr = _PARAM_NAME_MAPPING.__getitem__


@implicit
class Parameter:
    ...

@implicit
class BoundArguments:
    ...

@implicit
class Signature:
    ...

@implicit
def signature():
    ...
