# Copyright (c) Meta Platforms, Inc. and affiliates.

import sys

class _C:
    def _m(self): pass
MethodType = type(_C()._m)

def f():
    pass

FunctionType = type(f)


MappingProxyType = type(type.__dict__)
GenericAlias = type(list[int])

UnionType = type(int | str)

BuiltinFunctionType = type(len)
BuiltinMethodType = type([].append)     # Same as BuiltinFunctionType
WrapperDescriptorType = type(object.__init__)
MethodWrapperType = type(object().__repr__)
MethodDescriptorType = type(str.join)
GetSetDescriptorType = type(MethodType.__func__)
MemberDescriptorType = type(MethodType.__func__)
ModuleType = type(sys)

@implicit
def new_class():
    ...

@implicit
def resolve_bases():
    ...

@implicit
def prepare_class():
    ...

@implicit
def _calculate_meta(meta, bases):
    ...

@implicit
class DynamicClassAttribute:
    ...
