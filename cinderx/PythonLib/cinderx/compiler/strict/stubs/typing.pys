# Copyright (c) Meta Platforms, Inc. and affiliates.

import collections
import collections.abc
import contextlib
import sys
from abc import abstractmethod, ABCMeta
from __strict__ import extra_slot
TYPE_CHECKING = False
_bltin_isinstance = isinstance
import types
from types import WrapperDescriptorType, MethodWrapperType, MethodDescriptorType, GenericAlias


def isinstance(obj, cls):
    # allow checking if type parameters are tuples or lists
    if cls in (tuple, list):
        return loose_isinstance(obj, cls)
    # allow checking typing specific types against unknowns
    if cls in (_GenericAlias, TypeVar, _SpecialForm, types.UnionType):
        return loose_isinstance(obj, cls)
    return _bltin_isinstance(obj, cls)


def _remove_dups_flatten(parameters):
    params = []
    for p in parameters:
        if (isinstance(p, _GenericAlias) and p.__origin__ is Union) or isinstance(p, types.UnionType):
            params.extend(p.__args__)
        elif isinstance(p, tuple) and len(p) > 0 and p[0] is Union:
            params.extend(p[1:])
        else:
            params.append(p)

    new_params = []
    for t in params:
        # avoid using set or list contains to make unknown
        # type parameters correctly deduped, which is pretty common
        contains = False
        for e in new_params:
            if t is e:
                contains = True
                break
        if not contains:
            new_params.append(t)

    params = new_params
    return tuple(params)

def _tp_cache(func):
    """for stubing purpose a noop should suffice
    Implement actual caching if performance is an issue
    """
    return func

# a simpler version that does not do isinstance checks
# since the type parameters may be unknown in many cases.
# Once we have __annotations__ = True for most files this
# will be easier to support
def _type_check(arg, msg, is_argument=True, module=None, *, allow_special_forms=False):
    if arg is None:
        return type(None)

    return arg

@implicit
def _value_and_type_iter(): ...

@implicit
def _collect_type_vars(types): ...

@implicit
class _Final:
    ...

@implicit
def final(func):
    ...


@implicit
class _Immutable:
    ...

@implicit
class _SpecialForm:
    ...

@implicit
class _LiteralSpecialForm:
    ...

class TypeVar(_Final, _Immutable, _root=True):
    """
    explicitly declared to skip the sys._getframe in __init__
    """

    __slots__ = ('__name__', '__bound__', '__constraints__',
                 '__covariant__', '__contravariant__')

    def __init__(self, name, *constraints, bound=None,
                 covariant=False, contravariant=False):
        self.__name__ = name
        if covariant and contravariant:
            raise ValueError("Bivariant types are not supported.")
        self.__covariant__ = bool(covariant)
        self.__contravariant__ = bool(contravariant)
        if constraints and bound is not None:
            raise TypeError("Constraints cannot be combined with bound=...")
        if constraints and len(constraints) == 1:
            raise TypeError("A single constraint is not allowed")
        msg = "TypeVar(name, constraint, ...): constraints must be types."
        self.__constraints__ = tuple(_type_check(t, msg) for t in constraints)
        if bound is not None:
            self.__bound__ = _type_check(bound, "Bound must be a type.")
        else:
            self.__bound__ = None

    def __or__(self, right):
        return Union[self, right]

    def __ror__(self, right):
        return Union[self, right]


_normalize_alias = {'list': 'List',
                    'tuple': 'Tuple',
                    'dict': 'Dict',
                    'set': 'Set',
                    'frozenset': 'FrozenSet',
                    'deque': 'Deque',
                    'defaultdict': 'DefaultDict',
                    'type': 'Type',
                    'Set': 'AbstractSet'}

@implicit
class _TypeVarLike: ...

@implicit
class ParamSpecArgs: ...

@implicit
class ParamSpecKwargs: ...

# [strict modules] skipped setting __module__ using frame info
class ParamSpec(_Final, _Immutable, _TypeVarLike, _root=True):

    __slots__ = ('__name__', '__bound__', '__covariant__', '__contravariant__',
                 '__dict__')

    @property
    def args(self):
        return ParamSpecArgs(self)

    @property
    def kwargs(self):
        return ParamSpecKwargs(self)

    def __init__(self, name, *, bound=None, covariant=False, contravariant=False):
        self.__name__ = name
        super().__init__(bound, covariant, contravariant)

# this is purely for validation in typing which strict modules is not concerned with
# We can add support if this is needed
def _check_generic(cls, parameters, elen):
    pass

@implicit
class _TypingEmpty: ...

@implicit
class _TypingEllipsis: ...

@implicit
class _BaseGenericAlias: ...

@implicit
class _GenericAlias: ...

@implicit
class _SpecialGenericAlias: ...

@implicit
class _CallableGenericAlias: ...

@implicit
class _CallableType: ...

@implicit
class _TupleType: ...

@implicit
class _UnionGenericAlias: ...

@implicit
class _LiteralGenericAlias: ...


class Generic:

    __slots__ = ()
    _is_protocol = False


    @_tp_cache
    def __class_getitem__(cls, params):
        if not isinstance(params, tuple):
            params = (params,)

        params = params = tuple(_type_convert(p) for p in params)
        if cls is Generic or cls is Protocol:
            pass
        else:
            # Subscripting a regular Generic subclass.
            _check_generic(cls, params, len(cls.__parameters__))
        return _GenericAlias(cls, params,
                             _typevar_types=(TypeVar, ParamSpec),
                             _paramspec_tvars=True)

    def __init_subclass__(cls, *args, **kwargs):
        super().__init_subclass__(*args, **kwargs)
        tvars = []
        if '__orig_bases__' in cls.__dict__:
            tvars = _collect_type_vars(cls.__orig_bases__)
            # Look for Generic[T1, ..., Tn].
            # If found, tvars must be a subset of it.
            # If not found, tvars is it.
            # Also check for and reject plain Generic,
            # and reject multiple Generic[...].
            gvars = None
            for base in cls.__orig_bases__:
                if (isinstance(base, _GenericAlias) and base.__origin__ is Generic):
                    gvars = base.__parameters__
            if gvars is None:
                gvars = tvars
            else:
                tvars = gvars
        extra_slot(cls, "__orig_class__")
        cls.__parameters__ = tuple(tvars)

@implicit
class _ProtocolMeta: ...

class Protocol(Generic, metaclass=_ProtocolMeta):
    __slots__ = ()

    _is_protocol = True

    def __class_getitem__(cls, params):
        # we need to treat `__class_getitem__` specially as classmethods
        return super().__class_getitem__(cls, params)

_Protocol = Protocol

_alias  = _SpecialGenericAlias

T = TypeVar('T')  # Any type.
KT = TypeVar('KT')  # Key type.
VT = TypeVar('VT')  # Value type.
T_co = TypeVar('T_co', covariant=True)  # Any type covariant containers.
V_co = TypeVar('V_co', covariant=True)  # Any type covariant containers.
VT_co = TypeVar('VT_co', covariant=True)  # Value type covariant containers.
T_contra = TypeVar('T_contra', contravariant=True)  # Ditto contravariant.
# Internal type variable used for Type[].
CT_co = TypeVar('CT_co', covariant=True, bound=type)

# A useful type variable with constraints.  This represents string types.
# (This one *is* for export!)
AnyStr = TypeVar('AnyStr', bytes, str)

Hashable = _alias(collections.abc.Hashable, 0)  # Not generic.
Awaitable = _alias(collections.abc.Awaitable, 1)
Coroutine = _alias(collections.abc.Coroutine, 3)
AsyncIterable = _alias(collections.abc.AsyncIterable, 1)
AsyncIterator = _alias(collections.abc.AsyncIterator, 1)
Iterable = _alias(collections.abc.Iterable, 1)
Iterator = _alias(collections.abc.Iterator, 1)
Reversible = _alias(collections.abc.Reversible, 1)
Sized = _alias(collections.abc.Sized, 0)  # Not generic.
Container = _alias(collections.abc.Container, 1)
Collection = _alias(collections.abc.Collection, 1)
Callable = _CallableType(collections.abc.Callable, 2)
AbstractSet = _alias(collections.abc.Set, 1)
MutableSet = _alias(collections.abc.MutableSet, 1)
Mapping = _alias(collections.abc.Mapping, 2)
MutableMapping = _alias(collections.abc.MutableMapping, 2)
Sequence = _alias(collections.abc.Sequence, 1)
MutableSequence = _alias(collections.abc.MutableSequence, 1)
ByteString = _alias(collections.abc.ByteString, 0)  # Not generic
Tuple = _TupleType(tuple, -1, inst=False, name='Tuple')
List = _alias(list, 1, inst=False)
# Deque = _alias(collections.deque, 1)
Set = _alias(set, 1, inst=False)
FrozenSet = _alias(frozenset, 1, inst=False)
MappingView = _alias(collections.abc.MappingView, 1)
KeysView = _alias(collections.abc.KeysView, 1)
ItemsView = _alias(collections.abc.ItemsView, 2)
ValuesView = _alias(collections.abc.ValuesView, 1)
ContextManager = _alias(contextlib.AbstractContextManager, 1)
AsyncContextManager = _alias(contextlib.AbstractAsyncContextManager, 1)
Dict = _alias(dict, 2, inst=False)
DefaultDict = _alias(collections.defaultdict, 2)
OrderedDict = _alias(collections.OrderedDict, 2)
Counter = _alias(collections.Counter, 1)
ChainMap = _alias(collections.ChainMap, 2)
Generator = _alias(collections.abc.Generator, 3)
AsyncGenerator = _alias(collections.abc.AsyncGenerator, 2)
Type = _alias(type, 1, inst=False)

@implicit
def _make_nmtuple(name, types): ...


# attributes prohibited to set in NamedTuple class syntax
_prohibited = ('__new__', '__init__', '__slots__', '__getnewargs__',
               '_fields', '_field_defaults', '_field_types',
               '_make', '_replace', '_asdict', '_source')

_special = ('__module__', '__name__', '__annotations__')

@implicit
class NamedTupleMeta:
    ...

def NamedTuple(typename, fields=None, /, **kwargs):
    if fields is None:
        fields = kwargs.items()
    elif kwargs:
        raise TypeError("Either list of fields or keywords"
                        " can be provided to NamedTuple, not both")
    return _make_nmtuple(typename, fields, module=None)

@implicit
def _namedtuple_mro_entries(bases): ...

_NamedTuple = type.__new__(NamedTupleMeta, 'NamedTuple', (), {})
NamedTuple.__mro_entries__ = _namedtuple_mro_entries

@implicit
class _TypedDictMeta: ...

def TypedDict(typename, fields=None, /, *, total=True, **kwargs):
    if fields is None:
        fields = kwargs
    elif kwargs:
        raise TypeError("TypedDict takes either a dict or keyword arguments,"
                        " but not both")

    ns = {'__annotations__': dict(fields)}
    return _TypedDictMeta(typename, (), ns, total=total)

_TypedDict = type.__new__(_TypedDictMeta, 'TypedDict', (), {})
TypedDict.__mro_entries__ = lambda bases: (_TypedDict,)

@implicit
def Any(): ...

@implicit
def ClassVar(): ...

@implicit
def NoReturn(): ...

@implicit
def Union(): ...

@implicit
def Optional(): ...

@implicit
def _deduplicate(): ...

@implicit
def _flatten_literal_params(): ...

@_LiteralSpecialForm
def Literal(self, *parameters):
    parameters = _flatten_literal_params(parameters)
    try:
        parameters = tuple(p for p, _ in _deduplicate(list(_value_and_type_iter(parameters))))
    except TypeError:
        pass
    return _LiteralGenericAlias(self, parameters)

@implicit
def Final(): ...

@implicit
def TypeAlias(): ...

@implicit
def Concatenate(): ...

@implicit
def TypeGuard(): ...

@implicit
def cast():
    ...

# forward ref without support for compiling the string
class ForwardRef(_Final, _root=True):

    def __init__(self, arg, is_argument=True):
        if not isinstance(arg, str):
            raise TypeError(f"Forward reference must be a string -- got {arg!r}")

        self.__forward_arg__ = arg
        self.__forward_evaluated__ = False
        self.__forward_value__ = None
        self.__forward_is_argument__ = is_argument

@implicit
def _type_convert(): ...

@implicit
def overload(func):
    ...

@implicit
def _overload_dummy():
    ...

@implicit
class NewType: ...
