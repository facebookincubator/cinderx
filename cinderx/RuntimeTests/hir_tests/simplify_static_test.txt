--- Test Suite Name ---
SimplifyStaticTest
--- Passes ---
Simplify
--- Test Name ---
UnboxOfRandMaxIsEliminated
--- Input ---
from __static__ import rand, RAND_MAX, box, int64
def test():
    x: int64 = rand() // int64(RAND_MAX)
    return box(x)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v9:Nullptr = LoadConst<Nullptr>
    Snapshot
    v10:CInt32 = CallStatic<Ci_static_rand@0xdeadbeef, 0>
    Snapshot
    v11:CInt64 = IntConvert<CInt64> v10
    v12:MortalLongExact[2147483647] = LoadConst<MortalLongExact[2147483647]>
    v19:CInt64[2147483647] = LoadConst<CInt64[2147483647]>
    v20:CInt64[0] = LoadConst<CInt64[0]>
    v16:CInt64 = IntBinaryOp<FloorDivide> v11 v19
    Snapshot
    v18:LongExact = PrimitiveBox<CInt64> v16 {
      FrameState {
        CurInstrOffset 18
        Locals<1> v16
      }
    }
    Return v18
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v11:Func = LoadCurrentFunc
    v12:Nullptr = LoadConst<Nullptr>
    Snapshot
    v13:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v13
  }

  bb 2 (preds 0) {
    Snapshot
    v14:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v12
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v16:CInt32 = CallStatic<rand@0xdeadbeef, 0>
    Snapshot
    v17:CInt64 = IntConvert<CInt64> v16
    v18:MortalLongExact[2147483647] = LoadConst<MortalLongExact[2147483647]>
    v25:CInt64[2147483647] = LoadConst<CInt64[2147483647]>
    v26:CInt64[0] = LoadConst<CInt64[0]>
    v22:CInt64 = IntBinaryOp<FloorDivide> v17 v25
    Snapshot
    v24:LongExact = PrimitiveBox<CInt64> v22 {
      FrameState {
        CurInstrOffset 30
        Locals<1> v22
      }
    }
    Return v24
  }
}
--- Test Name ---
UnboxOfFinalIsEliminated
--- Input ---
from typing import Final
from __static__ import int64, unbox

MY_FINAL: Final[int] = 111

def test() -> bool:
    i: int64 = 64
    if i < unbox(MY_FINAL):
        return True
    else:
        return False
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v8:Nullptr = LoadConst<Nullptr>
    Snapshot
    v9:CInt64[64] = LoadConst<CInt64[64]>
    v11:ImmortalLongExact[111] = LoadConst<ImmortalLongExact[111]>
    v20:CInt64[111] = LoadConst<CInt64[111]>
    v21:CInt64[0] = LoadConst<CInt64[0]>
    v15:CBool = PrimitiveCompare<LessThan> v9 v20
    Snapshot
    CondBranch<1, 2> v15
  }

  bb 1 (preds 0) {
    Snapshot
    v16:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    Return<Bool> v16
  }

  bb 2 (preds 0) {
    Snapshot
    v18:ImmortalBool[False] = LoadConst<ImmortalBool[False]>
    Return<Bool> v18
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v11:Func = LoadCurrentFunc
    v12:Nullptr = LoadConst<Nullptr>
    Snapshot
    v13:CInt32 = LoadEvalBreaker
    CondBranch<4, 3> v13
  }

  bb 4 (preds 0) {
    Snapshot
    v14:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v12
      }
    }
    Branch<3>
  }

  bb 3 (preds 0, 4) {
    Snapshot
    v16:CInt64[64] = LoadConst<CInt64[64]>
    v18:ImmortalLongExact[111] = LoadConst<ImmortalLongExact[111]>
    v27:CInt64[111] = LoadConst<CInt64[111]>
    v28:CInt64[0] = LoadConst<CInt64[0]>
    v22:CBool = PrimitiveCompare<LessThan> v16 v27
    Snapshot
    CondBranch<1, 2> v22
  }

  bb 1 (preds 3) {
    Snapshot
    v23:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    Return<ImmortalBool[True]> v23
  }

  bb 2 (preds 3) {
    Snapshot
    v25:ImmortalBool[False] = LoadConst<ImmortalBool[False]>
    Return<ImmortalBool[False]> v25
  }
}
--- Test Name ---
UnboxOfFinalDoubleIsEliminated
--- Input ---
from typing import Final
from __static__ import double, unbox

MY_FINAL: Final[float] = 1.23

def test() -> double:
    d: double = unbox(MY_FINAL)
    return d
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    Snapshot
    v5:MortalFloatExact[1.23] = LoadConst<MortalFloatExact[1.23]>
    Snapshot
    v9:CDouble[1.23] = LoadConst<CDouble[1.23]>
    Return<CDouble> v9
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:Func = LoadCurrentFunc
    v8:Nullptr = LoadConst<Nullptr>
    Snapshot
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    Snapshot
    v10:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v8
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v12:MortalFloatExact[1.23] = LoadConst<MortalFloatExact[1.23]>
    Snapshot
    v16:CDouble[1.23] = LoadConst<CDouble[1.23]>
    Return<CDouble> v16
  }
}
--- Test Name ---
UnboxOfFinalUnsignedIsEliminated
--- Input ---
from typing import Final
from __static__ import uint8, unbox

MY_FINAL: Final[int] = 42

def test() -> uint8:
    u: uint8 = unbox(MY_FINAL)
    return u
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    Snapshot
    v5:ImmortalLongExact[42] = LoadConst<ImmortalLongExact[42]>
    v10:CUInt8[42] = LoadConst<CUInt8[42]>
    v11:CInt64[0] = LoadConst<CInt64[0]>
    Return<CUInt8> v10
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:Func = LoadCurrentFunc
    v8:Nullptr = LoadConst<Nullptr>
    Snapshot
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    Snapshot
    v10:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v8
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v12:ImmortalLongExact[42] = LoadConst<ImmortalLongExact[42]>
    v17:CUInt8[42] = LoadConst<CUInt8[42]>
    v18:CInt64[0] = LoadConst<CInt64[0]>
    Return<CUInt8> v17
  }
}
--- Test Name ---
UnboxOfFinalWithOverflowIsNotEliminated
--- Input ---
from typing import Final
from __static__ import int8, unbox

MY_FINAL: Final[int] = 10000

def test() -> int8:
    i: int8 = unbox(MY_FINAL)
    return i
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    Snapshot
    v5:MortalLongExact[10000] = LoadConst<MortalLongExact[10000]>
    v7:CInt8 = PrimitiveUnbox<CInt8> v5
    v8:CInt64 = IsNegativeAndErrOccurred v7 {
      FrameState {
        CurInstrOffset 4
        Locals<1> v4
      }
    }
    Return<CInt8> v7
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:Func = LoadCurrentFunc
    v8:Nullptr = LoadConst<Nullptr>
    Snapshot
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    Snapshot
    v10:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v8
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v12:MortalLongExact[10000] = LoadConst<MortalLongExact[10000]>
    v14:CInt8 = PrimitiveUnbox<CInt8> v12
    v15:CInt64 = IsNegativeAndErrOccurred v14 {
      FrameState {
        CurInstrOffset 6
        Locals<1> v8
      }
    }
    Return<CInt8> v14
  }
}
--- Test Name ---
CastOfKnownInexactTypeIsEliminated
--- Input ---
from __static__ import cast

def test(x: int):
    return cast(int, x)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v2:Long = LoadArg<0; "x", Long>
    Snapshot
    Snapshot
    Return v2
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Long = LoadArg<0; "x", Long>
    v6:Func = LoadCurrentFunc
    Snapshot
    v7:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v7
  }

  bb 2 (preds 0) {
    Snapshot
    v8:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v5
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    Snapshot
    Return v5
  }
}
--- Test Name ---
CastOfKnownInexactOptionalTypeIsEliminated
--- Input ---
from __static__ import cast
from typing import Optional

def test():
    return cast(Optional[int], None)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:NoneType = LoadConst<NoneType>
    Snapshot
    Return v2
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Func = LoadCurrentFunc
    Snapshot
    v6:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v6
  }

  bb 2 (preds 0) {
    Snapshot
    v7:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v8:ImmortalNoneType = LoadConst<ImmortalNoneType>
    Snapshot
    Return v8
  }
}
--- Test Name ---
CastOfKnownExactTypeIsEliminated
--- Input ---
from __static__ import cast

def test(x: bool):
    return cast(bool, x)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v2:Bool = LoadArg<0; "x", Bool>
    Snapshot
    Snapshot
    Return v2
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Bool = LoadArg<0; "x", Bool>
    v6:Func = LoadCurrentFunc
    Snapshot
    v7:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v7
  }

  bb 2 (preds 0) {
    Snapshot
    v8:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v5
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    Snapshot
    Return v5
  }
}
--- Test Name ---
CastOfUnknownExactTypeIsNotEliminated
--- Input ---
from __static__ import cast

def test(x):
    return cast(bool, x)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v2:Object = LoadArg<0; "x">
    Snapshot
    v4:Bool = Cast<Exact[bool]> v2 {
      FrameState {
        CurInstrOffset 2
        Locals<1> v2
      }
    }
    Snapshot
    Return v4
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "x">
    v6:Func = LoadCurrentFunc
    Snapshot
    v7:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v7
  }

  bb 2 (preds 0) {
    Snapshot
    v8:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v5
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v10:Bool = Cast<Exact[bool]> v5 {
      FrameState {
        CurInstrOffset 4
        Locals<1> v5
      }
    }
    Snapshot
    Return v10
  }
}
--- Test Name ---
LoopDoesNotUseBoxedValue
--- Input ---
def test(*x):
  for i in x:
   print(i)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v15:TupleExact = LoadArg<0; "x", TupleExact>
    v16:Nullptr = LoadConst<Nullptr>
    Snapshot
    v18:CInt64[0] = LoadConst<CInt64[0]>
    Branch<4>
  }

  bb 4 (preds 0, 2) {
    v24:CInt64 = Phi<0, 2> v18 v37
    v25:OptObject = Phi<0, 2> v16 v48
    v21:CInt32 = LoadEvalBreaker
    CondBranch<5, 1> v21
  }

  bb 5 (preds 4) {
    Snapshot
    v26:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 6
        Locals<3> v15 v24 v25
        Stack<1> v15
      }
    }
    Branch<1>
  }

  bb 1 (preds 4, 5) {
    Snapshot
    v31:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v15
    Snapshot
    v32:CBool = PrimitiveCompare<GreaterThan> v31 v24
    Snapshot
    CondBranch<2, 3> v32
  }

  bb 2 (preds 1) {
    Snapshot
    v34:LongExact = PrimitiveBox<CInt64> v24 {
      FrameState {
        CurInstrOffset 20
        Locals<3> v15 v24 v25
        Stack<2> v15 v15
      }
    }
    UseType<TupleExact> v15
    UseType<LongExact> v34
    v46:CInt64 = IsNegativeAndErrOccurred v24 {
      FrameState {
        CurInstrOffset 22
        Locals<3> v15 v24 v25
        Stack<1> v15
      }
    }
    v47:CInt64 = CheckSequenceBounds v15 v24 {
      FrameState {
        CurInstrOffset 22
        Locals<3> v15 v24 v25
        Stack<1> v15
      }
    }
    v48:Object = LoadArrayItem<Offset[24]> v15 v47 v15
    Snapshot
    v36:CInt64[1] = LoadConst<CInt64[1]>
    v37:CInt64 = IntBinaryOp<Add> v24 v36
    Snapshot
    v40:OptObject = LoadGlobalCached<0; "print">
    v41:MortalObjectUser[builtin_function_or_method:print:0xdeadbeef] = GuardIs<0xdeadbeef> v40 {
      Descr 'LOAD_GLOBAL: print'
    }
    Snapshot
    v43:Object = VectorCall<1> v41 v48 {
      FrameState {
        CurInstrOffset 38
        Locals<3> v15 v37 v48
        Stack<1> v15
      }
    }
    Snapshot
    Branch<4>
  }

  bb 3 (preds 1) {
    Snapshot
    v44:NoneType = LoadConst<NoneType>
    Return v44
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v19:TupleExact = LoadArg<0; "x", TupleExact>
    v20:Func = LoadCurrentFunc
    v21:Nullptr = LoadConst<Nullptr>
    Snapshot
    v22:CInt32 = LoadEvalBreaker
    CondBranch<5, 4> v22
  }

  bb 5 (preds 0) {
    Snapshot
    v23:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<3> v19 v21 v21
      }
    }
    Branch<4>
  }

  bb 4 (preds 0, 5) {
    Snapshot
    v27:CInt64[0] = LoadConst<CInt64[0]>
    Branch<6>
  }

  bb 6 (preds 2, 4) {
    v33:CInt64 = Phi<2, 4> v46 v27
    v34:OptObject = Phi<2, 4> v58 v21
    v30:CInt32 = LoadEvalBreaker
    CondBranch<7, 1> v30
  }

  bb 7 (preds 6) {
    Snapshot
    v35:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 10
        Locals<3> v19 v33 v34
        Stack<1> v19
      }
    }
    Branch<1>
  }

  bb 1 (preds 6, 7) {
    Snapshot
    v40:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v19
    Snapshot
    v41:CBool = PrimitiveCompare<GreaterThan> v40 v33
    Snapshot
    CondBranch<2, 3> v41
  }

  bb 2 (preds 1) {
    Snapshot
    v43:LongExact = PrimitiveBox<CInt64> v33 {
      FrameState {
        CurInstrOffset 24
        Locals<3> v19 v33 v34
        Stack<2> v19 v19
      }
    }
    UseType<TupleExact> v19
    UseType<LongExact> v43
    v56:CInt64 = IsNegativeAndErrOccurred v33 {
      FrameState {
        CurInstrOffset 26
        Locals<3> v19 v33 v34
        Stack<1> v19
      }
    }
    v57:CInt64 = CheckSequenceBounds v19 v33 {
      FrameState {
        CurInstrOffset 26
        Locals<3> v19 v33 v34
        Stack<1> v19
      }
    }
    v58:Object = LoadArrayItem<Offset[24]> v19 v57 v19
    Snapshot
    v45:CInt64[1] = LoadConst<CInt64[1]>
    v46:CInt64 = IntBinaryOp<Add> v33 v45
    Snapshot
    v49:Nullptr = LoadConst<Nullptr>
    v50:OptObject = LoadGlobalCached<0; "print">
    v51:MortalObjectUser[builtin_function_or_method:print:0xdeadbeef] = GuardIs<0xdeadbeef> v50 {
      Descr 'LOAD_GLOBAL: print'
    }
    Snapshot
    v59:Object = VectorCall<1> v51 v58 {
      FrameState {
        CurInstrOffset 54
        Locals<3> v19 v46 v58
        Stack<1> v19
      }
    }
    Snapshot
    Branch<6>
  }

  bb 3 (preds 1) {
    Snapshot
    v53:ImmortalNoneType = LoadConst<ImmortalNoneType>
    Return<ImmortalNoneType> v53
  }
}
--- Test Name ---
UnboxBoxWithDifferentSizesNotOptimized
--- Input ---
from __static__ import int8, int64, box, unbox

def test(x: int64) -> int8:
    y: int8 = unbox(box(x))
    return y
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v5:CInt64 = LoadArg<0; "x", CInt64>
    v6:Nullptr = LoadConst<Nullptr>
    Snapshot
    v7:LongExact = PrimitiveBox<CInt64> v5 {
      FrameState {
        CurInstrOffset 2
        Locals<2> v5 v6
      }
    }
    v9:CInt8 = PrimitiveUnbox<CInt8> v7
    v10:CInt64 = IsNegativeAndErrOccurred v9 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v5 v6
      }
    }
    Return<CInt8> v9
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v8:CInt64 = LoadArg<0; "x", CInt64>
    v9:Func = LoadCurrentFunc
    v10:Nullptr = LoadConst<Nullptr>
    Snapshot
    v11:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v11
  }

  bb 2 (preds 0) {
    Snapshot
    v12:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<2> v8 v10
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v15:LongExact = PrimitiveBox<CInt64> v8 {
      FrameState {
        CurInstrOffset 4
        Locals<2> v8 v10
      }
    }
    v17:CInt8 = PrimitiveUnbox<CInt8> v15
    v18:CInt64 = IsNegativeAndErrOccurred v17 {
      FrameState {
        CurInstrOffset 8
        Locals<2> v8 v10
      }
    }
    Return<CInt8> v17
  }
}
--- End ---
