--- Test Suite Name ---
StaticArrayItemTest
--- Passes ---
--- Test Name ---
ArrayLookupEmitsLoadLoadArrayItem
--- Input ---
from __static__ import int64, Array, box

def test(a: Array[int64]) -> int64:
    return a[2]
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v0 = LoadArg<0; "a", Array>
    Snapshot
    v0 = CheckVar<"a"> v0 {
      FrameState {
        CurInstrOffset 0
        Locals<1> v0
      }
    }
    v1 = LoadConst<ImmortalLongExact[2]>
    v1 = RefineType<LongExact> v1
    v2 = PrimitiveUnbox<CInt64> v1
    v3 = IsNegativeAndErrOccurred v2 {
      FrameState {
        CurInstrOffset 6
        Locals<1> v0
        Stack<1> v0
      }
    }
    v4 = CheckSequenceBounds v0 v2 {
      FrameState {
        CurInstrOffset 8
        Locals<1> v0
      }
    }
    v7 = LoadConst<CInt64[24]>
    v5 = LoadFieldAddress v0 v7
    v6 = LoadArrayItem v5 v4 v0
    Snapshot
    Return<CInt64> v6
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v0 = LoadArg<0; "a", Array>
    v1 = LoadCurrentFunc
    Snapshot
    v2 = LoadEvalBreaker
    CondBranch<2, 1> v2
  }

  bb 2 (preds 0) {
    Snapshot
    v3 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v4 = LoadConst<ImmortalLongExact[2]>
    v4 = RefineType<LongExact> v4
    v5 = PrimitiveUnbox<CInt64> v4
    v6 = IsNegativeAndErrOccurred v5 {
      FrameState {
        CurInstrOffset 8
        Locals<1> v0
        Stack<1> v0
      }
    }
    v7 = CheckSequenceBounds v0 v5 {
      FrameState {
        CurInstrOffset 10
        Locals<1> v0
      }
    }
    v10 = LoadConst<CInt64[24]>
    v8 = LoadFieldAddress v0 v10
    v9 = LoadArrayItem v8 v7 v0
    Snapshot
    Return<CInt64> v9
  }
}
--- Test Name ---
ArrayAssignEmitsStoreArrayItem
--- Input ---
from __static__ import int64, Array, box

def test(a: Array[int64]) -> None:
    a[2] = 3
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v0 = LoadArg<0; "a", Array>
    Snapshot
    v1 = LoadConst<CInt64[3]>
    v0 = CheckVar<"a"> v0 {
      FrameState {
        CurInstrOffset 2
        Locals<1> v0
        Stack<1> v1
      }
    }
    v2 = LoadConst<ImmortalLongExact[2]>
    v2 = RefineType<LongExact> v2
    v3 = PrimitiveUnbox<CInt64> v2
    v4 = IsNegativeAndErrOccurred v3 {
      FrameState {
        CurInstrOffset 8
        Locals<1> v0
        Stack<2> v1 v0
      }
    }
    v5 = CheckSequenceBounds v0 v3 {
      FrameState {
        CurInstrOffset 10
        Locals<1> v0
      }
    }
    v7 = LoadConst<CInt64[24]>
    v6 = LoadFieldAddress v0 v7
    StoreArrayItem v6 v5 v1 v0
    Snapshot
    v8 = LoadConst<NoneType>
    v8 = RefineType<NoneType> v8
    Return<NoneType> v8
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v0 = LoadArg<0; "a", Array>
    v1 = LoadCurrentFunc
    Snapshot
    v2 = LoadEvalBreaker
    CondBranch<2, 1> v2
  }

  bb 2 (preds 0) {
    Snapshot
    v3 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v4 = LoadConst<CInt64[3]>
    v5 = LoadConst<ImmortalLongExact[2]>
    v5 = RefineType<LongExact> v5
    v6 = PrimitiveUnbox<CInt64> v5
    v7 = IsNegativeAndErrOccurred v6 {
      FrameState {
        CurInstrOffset 10
        Locals<1> v0
        Stack<2> v4 v0
      }
    }
    v8 = CheckSequenceBounds v0 v6 {
      FrameState {
        CurInstrOffset 12
        Locals<1> v0
      }
    }
    v10 = LoadConst<CInt64[24]>
    v9 = LoadFieldAddress v0 v10
    StoreArrayItem v9 v8 v4 v0
    Snapshot
    v11 = LoadConst<ImmortalNoneType>
    v11 = RefineType<ImmortalNoneType> v11
    Return<ImmortalNoneType> v11
  }
}
--- End ---
