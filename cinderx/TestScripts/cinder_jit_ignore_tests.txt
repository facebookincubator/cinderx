# TASK(T62830617): These contain individual tests that rely on features
# that are unsupported by the JIT. Manually disable the failing tests when
# the JIT is enabled.
test_builtin
test_compile
test_decimal
test_inspect
test_rlcompleter
test_signal
# These probably won't ever work under the JIT
test_cprofile
test_pdb
test_profile
test.test_monitoring.*
test_sys_setprofile
test_sys_settrace
test_trace
test_bdb
# multithreaded_compile_test requires special -X options
multithreaded_compile_test

# TASK(T87011403): The JIT doesn't support recursion limits.
test.test_call.TestRecursion.test_recursion_with_kwargs
test.test_call.TestRecursion.test_super_deep
test.test_exceptions.ExceptionTests.test_badisinstance
test.test_exceptions.ExceptionTests.testInfiniteRecursion
test.test_exceptions.ExceptionTests.test_recursion_error_cleanup
test.test_exceptions.ExceptionTests.test_recursion_in_except_handler
test.test_exceptions.ExceptionTests.test_recursion_normalizing_exception
test.test_isinstance.TestIsInstanceIsSubclass.test_infinitely_many_bases
test.test_isinstance.TestIsInstanceIsSubclass.test_infinite_recursion_in_bases
test.test_json.test_recursion.TestPyRecursion.test_endless_recursion
test.test_json.test_recursion.TestPyRecursion.test_highly_nested_objects_decoding
test.test_json.test_recursion.TestPyRecursion.test_highly_nested_objects_encoding
test.test_logging.ModuleLevelMiscTest.test_recursion_error
test.test_pickle.*.test_bad_getattr
test.test_pickletools.*.test_bad_getattr
test.test_plistlib.TestBinaryPlistlib.test_deep_nesting
test.test_support.TestSupport.test_recursion
test.test_sys.SysModuleTest.test_recursionlimit_recovery
test.test_sys.SysModuleTest.test_setrecursionlimit_recursion_depth
test.test_sys.SysModuleTest.test_setrecursionlimit_to_depth
test.test_threading.ThreadingExceptionTests.test_recursion_limit
test.test_traceback.TestTracebackException.test_long_context_chain
test.test_traceback.TracebackFormatTests.test_recursive_traceback_cpython_internal
test.test_traceback.TracebackFormatTests.test_recursive_traceback_python

# TASK(T87023404): Eval breaker timing
unittest.test.test_break.*.testInterruptCaught
unittest.test.test_break.*.testSecondInterrupt

# TASK(T80087792): _Py_RefTotal is incorrectly updated by JIT for immortal types
test.test_types.UnionTests.test_or_type_operator_reference_cycle

# TASK(T86183012): Incorrect coroutine naming
test.test_asyncio.test_tasks.*.test_coroutine_never_yielded
test.test_asyncio.test_tasks.*.test_task_repr_coro_decorator

# TASK(T128872288): Subtle refcounting distinction in JIT and interpreter
test.test_compileall.HardlinkDedupTestsNoSourceEpoch.test_duplicated_levels
test.test_compileall.HardlinkDedupTestsNoSourceEpoch.test_hardlink
test.test_compileall.HardlinkDedupTestsNoSourceEpoch.test_import
test.test_compileall.HardlinkDedupTestsNoSourceEpoch.test_only_two_levels
test.test_compileall.HardlinkDedupTestsNoSourceEpoch.test_recompilation
test.test_compileall.HardlinkDedupTestsWithSourceEpoch.test_duplicated_levels
test.test_compileall.HardlinkDedupTestsWithSourceEpoch.test_hardlink
test.test_compileall.HardlinkDedupTestsWithSourceEpoch.test_import
test.test_compileall.HardlinkDedupTestsWithSourceEpoch.test_only_two_levels
test.test_compileall.HardlinkDedupTestsWithSourceEpoch.test_recompilation
test.test_ctypes.test_memfunctions.MemFunctionsTest.test_string_at
test.test_ctypes.test_refcounts.RefcountTestCase.test_1
# These differ in ref counting and a code object only has a single ref count when
# it gets marshalled, this results in marshal not marking it as possibly being
# included in a cycle and so the marshal bytes differ slightly
test.test_importlib.test_abc.Frozen_SourceLoaderBytecodeTests.test_code_bad_magic
test.test_importlib.test_abc.Source_SourceLoaderBytecodeTests.test_code_bad_magic
test.test_importlib.test_abc.Frozen_SourceLoaderBytecodeTests.test_code_bad_timestamp
test.test_importlib.test_abc.Source_SourceLoaderBytecodeTests.test_code_bad_timestamp

# TASK(T128365005): Need up-to-date locals in frames returned by sys._getframe()
test.test_frame.TestCAPI.test_getvar
test.test_frame.TestFrameCApi.test_basic
test.test_frame.TestFrameLocals.test_as_dict
test.test_frame.TestFrameLocals.test_constructor
test.test_frame.TestFrameLocals.test_copy
test.test_frame.TestFrameLocals.test_is_mapping
test.test_frame.TestFrameLocals.test_local_objects
test.test_frame.TestFrameLocals.test_proxy_key_stringlikes_ftrst_write
test.test_frame.TestFrameLocals.test_proxy_key_stringlikes_overwrite
test.test_frame.TestFrameLocals.test_write_with_hidden
test.test_traceback.TestStack.test_format_locals

# TASK(T128782227): exc.tb_frame->f_back not correct in except blocks
test.test_sys.SysModuleTest.test_current_exceptions

# Tests specific refcounting details of the interpreter
test.test_enumerate.TestReversed.test_bug1229429
test.test_generators.FinalizationTest.test_refcycle
test.test_gc.GCTests.test_frame
test.test_frame.TestIncompleteFrameAreInvisible.test_sneaky_frame_object_teardown

# TASK(T128782227): Frames accessed from exception tracebacks are different
# in shadow-frame mode.
test.test_io.*.test_reader_writer_close_error_on_close

# The JIT does not support locals()
test.test_unicode_identifiers.PEP3131Test.test_non_bmp_normalized

# TASK(T143118641): JIT holds strong reference to globals dict
test.test_module.ModuleTests.test_clear_dict_in_ref_cycle
test.test_io.CTextIOWrapperTest.test_create_at_shutdown*
test.test_io.PyTextIOWrapperTest.test_create_at_shutdown*
test.test_threading.ThreadTests.test_main_thread_during_shutdown
test.test_traceback.TracebackCases.test_print_traceback_at_exit

# The JIT does not support settrace() or setprofile()
test.test_audit.AuditTest.test_cantrace
test.test_doctest.test_pdb_set_trace
test.test_doctest.test_pdb_set_trace_nested
test.test_patma.TestTracing.*
test.test_pstats.StatsTestCase.test_get_stats_profile
test.test_peepholer.TestMarkingVariablesAsUnKnown.test_deleting_local_warns_and_assigns_none
test.test_peepholer.TestMarkingVariablesAsUnKnown.test_setting_lineno_one_undefined
test.test_peepholer.TestMarkingVariablesAsUnKnown.test_setting_lineno_two_undefined
test.test_doctest.test_doctest.test_pdb_set_trace_nested
test.test_doctest.test_doctest.test_pdb_set_trace
test.test_frame.TestIncompleteFrameAreInvisible.test_sneaky_frame_object

# The JIT doesn't support pdb and this test runs it as part of a subprocess.
test.test_zipimport_support.ZipSupportTests.test_pdb_issue4201

# These are CinderX override test functions that should also be ignored based on
# the contents of this file.
test_cinderx.test_cpython_overrides.test_trace.CinderX_TestLineCounts.test_trace_list_comprehension
test_cinderx.test_coro_extensions.CoroutineAwaiterTest.test_eager_await

# The JIT doesn't quicken bytecode
test.test_dis.DisTests.test_loop_quicken
test.test_dis.DisTests.test_loop_with_conditional_at_end_is_quickened
test.test_dis.DisTests.test_super_instructions
test.test_dis.DisWithFileTests.test_loop_quicken
test.test_dis.DisWithFileTests.test_loop_with_conditional_at_end_is_quickened
test.test_dis.DisWithFileTests.test_super_instructions
test.test_type_cache.TypeCacheWithSpecializationTests.test_class_call_specialization_user_type
test.test_type_cache.TypeCacheWithSpecializationTests.test_class_load_attr_specialization_static_type
test.test_type_cache.TypeCacheWithSpecializationTests.test_class_load_attr_specialization_user_type
test.test_type_cache.TypeCacheWithSpecializationTests.test_property_load_attr_specialization_user_type
test.test_type_cache.TypeCacheWithSpecializationTests.test_store_attr_specialization_user_type
test.test_type_cache.TypeCacheWithSpecializationTests.test_to_bool_specialization_user_type

# The JIT doesn't respect PEP-523
test.test_capi.test_misc.Test_Pep523API.test_inlined_send
test.test_capi.test_misc.Test_Pep523API.test_inlined_load_attr
test.test_capi.test_misc.Test_Pep523API.test_inlined_for_iter
test.test_capi.test_misc.Test_Pep523API.test_inlined_call_function_ex
test.test_capi.test_misc.Test_Pep523API.test_inlined_call
test.test_capi.test_misc.Test_Pep523API.test_inlined_binary_subscr

# JIT generator objects are larger
test.test_sys.SizeofTest.test_objecttypes

# The JIT doesn't update line numbers for list construction which is considerd non-escaping
test.test_tracemalloc.TestTracemallocEnabled.test_new_reference

# JIT doesn't support reading from local variables (in the dir() case)
test.test_descr.ClassPropertiesAndMethods.test_dir

# AssertionError: {} != {'self': <test.test_capi.test_eval.Tests t[34 chars]': 1}
# - {}
# + {'self': <test.test_capi.test_eval.Tests testMethod=test_eval_getlocals>,
# +  'x': 1}
test.test_capi.test_eval.Tests.test_eval_getlocals

# The JIT doesn't follow changes to local variables via the frame objects
test.test_generators.ModifyUnderlyingIterableTest.test_modify_f_locals

# TASK(T239036547) This relies on GC of a function's globals created in a call
# to exec(). However, we keep all "globals" objects alive via the JIT's
# PreloaderManager.
test.test_generators.FinalizationTest.test_generator_resurrect
